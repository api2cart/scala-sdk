/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AccountConfigUpdate200Response
import org.openapitools.client.model.AttributeDelete200Response
import org.openapitools.client.model.AttributeValueDelete200Response
import java.math.BigDecimal
import org.openapitools.client.model.CartConfigUpdate200Response
import org.openapitools.client.model.CartValidate200Response
import org.openapitools.client.model.CategoryAddBatch200Response
import org.openapitools.client.model.CustomerDelete200Response
import org.openapitools.client.model.ModelResponseProductAttributeList
import org.openapitools.client.model.ModelResponseProductBrandList
import org.openapitools.client.model.ModelResponseProductChildItemList
import org.openapitools.client.model.ModelResponseProductCurrencyList
import org.openapitools.client.model.ModelResponseProductList
import org.openapitools.client.model.ModelResponseProductOptionList
import org.openapitools.client.model.ModelResponseProductReviewList
import org.openapitools.client.model.ProductAdd
import org.openapitools.client.model.ProductAdd200Response
import org.openapitools.client.model.ProductAddBatch
import org.openapitools.client.model.ProductAttributeValueSet200Response
import org.openapitools.client.model.ProductAttributeValueUnset200Response
import org.openapitools.client.model.ProductChildItemFind200Response
import org.openapitools.client.model.ProductChildItemInfo200Response
import org.openapitools.client.model.ProductCount200Response
import org.openapitools.client.model.ProductCurrencyAdd200Response
import org.openapitools.client.model.ProductDeleteBatch
import org.openapitools.client.model.ProductFind200Response
import org.openapitools.client.model.ProductImageAdd
import org.openapitools.client.model.ProductImageAdd200Response
import org.openapitools.client.model.ProductImageUpdate200Response
import org.openapitools.client.model.ProductInfo200Response
import org.openapitools.client.model.ProductManufacturerAdd200Response
import org.openapitools.client.model.ProductOptionAdd
import org.openapitools.client.model.ProductOptionAdd200Response
import org.openapitools.client.model.ProductOptionAssign200Response
import org.openapitools.client.model.ProductOptionValueAdd200Response
import org.openapitools.client.model.ProductOptionValueAssign200Response
import org.openapitools.client.model.ProductPriceAdd
import org.openapitools.client.model.ProductPriceUpdate
import org.openapitools.client.model.ProductTaxAdd
import org.openapitools.client.model.ProductTaxAdd200Response
import org.openapitools.client.model.ProductUpdate
import org.openapitools.client.model.ProductUpdateBatch
import org.openapitools.client.model.ProductVariantAdd
import org.openapitools.client.model.ProductVariantAdd200Response
import org.openapitools.client.model.ProductVariantAddBatch
import org.openapitools.client.model.ProductVariantCount200Response
import org.openapitools.client.model.ProductVariantDeleteBatch
import org.openapitools.client.model.ProductVariantImageAdd
import org.openapitools.client.model.ProductVariantImageAdd200Response
import org.openapitools.client.model.ProductVariantList200Response
import org.openapitools.client.model.ProductVariantPriceAdd
import org.openapitools.client.model.ProductVariantPriceUpdate
import org.openapitools.client.model.ProductVariantUpdate
import org.openapitools.client.model.ProductVariantUpdateBatch
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ProductApi {

  def apply(baseUrl: String = "https://api.api2cart.com/v1.1") = new ProductApi(baseUrl)
}

class ProductApi(baseUrl: String) {

  /**
   * Add new product to store.
   * 
   * Expected answers:
   *   code 200 : ProductAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productAdd 
   */
  def productAdd(productAdd: ProductAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductAdd200Response] =
    ApiRequest[ProductAdd200Response](ApiMethods.POST, baseUrl, "/product.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productAdd)
      .withSuccessResponse[ProductAdd200Response](200)
      

  /**
   * Add new products to the store.
   * 
   * Expected answers:
   *   code 200 : CategoryAddBatch200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productAddBatch 
   */
  def productAddBatch(productAddBatch: ProductAddBatch)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CategoryAddBatch200Response] =
    ApiRequest[CategoryAddBatch200Response](ApiMethods.POST, baseUrl, "/product.add.batch.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productAddBatch)
      .withSuccessResponse[CategoryAddBatch200Response](200)
      

  /**
   * Get list of attributes and values.
   * 
   * Expected answers:
   *   code 200 : ModelResponseProductAttributeList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Retrieves attributes specified by product id
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param attributeId Retrieves info for specified attribute_id
   * @param variantId Defines product's variants specified by variant id
   * @param attributeGroupId Filter by attribute_group_id
   * @param langId Retrieves attributes specified by language id
   * @param storeId Retrieves attributes specified by store id
   * @param setName Retrieves attributes specified by set_name in Magento
   * @param sortBy Set field to sort by
   * @param sortDirection Set sorting direction
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def productAttributeList(productId: String, start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, attributeId: Option[String] = None, variantId: Option[String] = None, attributeGroupId: Option[String] = None, langId: Option[String] = None, storeId: Option[String] = None, setName: Option[String] = None, sortBy: Option[String] = None, sortDirection: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseProductAttributeList] =
    ApiRequest[ModelResponseProductAttributeList](ApiMethods.GET, baseUrl, "/product.attribute.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("product_id", productId)
      .withQueryParam("attribute_id", attributeId)
      .withQueryParam("variant_id", variantId)
      .withQueryParam("attribute_group_id", attributeGroupId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("set_name", setName)
      .withQueryParam("sort_by", sortBy)
      .withQueryParam("sort_direction", sortDirection)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseProductAttributeList](200)
      

  /**
   * Set attribute value to product.
   * 
   * Expected answers:
   *   code 200 : ProductAttributeValueSet200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines product id where the attribute should be added
   * @param attributeId Filter by attribute_id
   * @param attributeGroupId Filter by attribute_group_id
   * @param attributeName Define attribute name
   * @param value Define attribute value
   * @param valueId Define attribute value id
   * @param langId Language id
   * @param storeId Store Id
   */
  def productAttributeValueSet(productId: String, attributeId: Option[String] = None, attributeGroupId: Option[String] = None, attributeName: Option[String] = None, value: Option[String] = None, valueId: Option[Int] = None, langId: Option[String] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductAttributeValueSet200Response] =
    ApiRequest[ProductAttributeValueSet200Response](ApiMethods.POST, baseUrl, "/product.attribute.value.set.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("attribute_id", attributeId)
      .withQueryParam("attribute_group_id", attributeGroupId)
      .withQueryParam("attribute_name", attributeName)
      .withQueryParam("value", value)
      .withQueryParam("value_id", valueId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[ProductAttributeValueSet200Response](200)
      

  /**
   * Removes attribute value for a product.
   * 
   * Expected answers:
   *   code 200 : ProductAttributeValueUnset200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Product id
   * @param attributeId Attribute Id
   * @param storeId Store Id
   * @param includeDefault Boolean, whether or not to unset default value of the attribute, if applicable
   * @param reindex Is reindex required
   * @param clearCache Is cache clear required
   */
  def productAttributeValueUnset(productId: String, attributeId: String, storeId: Option[String] = None, includeDefault: Option[Boolean] = None, reindex: Option[Boolean] = None, clearCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductAttributeValueUnset200Response] =
    ApiRequest[ProductAttributeValueUnset200Response](ApiMethods.POST, baseUrl, "/product.attribute.value.unset.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("attribute_id", attributeId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("include_default", includeDefault)
      .withQueryParam("reindex", reindex)
      .withQueryParam("clear_cache", clearCache)
      .withSuccessResponse[ProductAttributeValueUnset200Response](200)
      

  /**
   * Get list of brands from your store.
   * 
   * Expected answers:
   *   code 200 : ModelResponseProductBrandList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param brandIds Retrieves brands specified by brand ids
   * @param categoryId Retrieves product brands specified by category id
   * @param parentId Retrieves brands specified by parent id
   * @param storeId Store Id
   * @param langId Language id
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findValue Entity search that is specified by some value
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def productBrandList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, brandIds: Option[String] = None, categoryId: Option[String] = None, parentId: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, findWhere: Option[String] = None, findValue: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseProductBrandList] =
    ApiRequest[ModelResponseProductBrandList](ApiMethods.GET, baseUrl, "/product.brand.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("brand_ids", brandIds)
      .withQueryParam("category_id", categoryId)
      .withQueryParam("parent_id", parentId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("find_value", findValue)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseProductBrandList](200)
      

  /**
   * Search product child item (bundled item or configurable product variant) in store catalog.
   * 
   * Expected answers:
   *   code 200 : ProductChildItemFind200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param findValue Entity search that is specified by some value
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findParams Entity search that is specified by comma-separated parameters
   * @param storeId Store Id
   */
  def productChildItemFind(findValue: Option[String] = None, findWhere: Option[String] = None, findParams: Option[String] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductChildItemFind200Response] =
    ApiRequest[ProductChildItemFind200Response](ApiMethods.GET, baseUrl, "/product.child_item.find.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("find_params", findParams)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[ProductChildItemFind200Response](200)
      

  /**
   * Get child for specific product.
   * 
   * Expected answers:
   *   code 200 : ProductChildItemInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Filter by parent product id
   * @param id Entity id
   * @param storeId Store Id
   * @param langId Language id
   * @param currencyId Currency Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param useLatestApiVersion Use the latest platform API version
   */
  def productChildItemInfo(productId: String, id: String, storeId: Option[String] = None, langId: Option[String] = None, currencyId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, useLatestApiVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductChildItemInfo200Response] =
    ApiRequest[ProductChildItemInfo200Response](ApiMethods.GET, baseUrl, "/product.child_item.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("currency_id", currencyId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("use_latest_api_version", useLatestApiVersion)
      .withSuccessResponse[ProductChildItemInfo200Response](200)
      

  /**
   * Get a list of a product's child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
   * 
   * Expected answers:
   *   code 200 : ModelResponseProductChildItemList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param productId Filter by parent product id
   * @param productIds Filter by parent product ids
   * @param sku Filter by products variant's sku
   * @param storeId Store Id
   * @param langId Language id
   * @param currencyId Currency Id
   * @param availSale Specifies the set of available/not available products for sale
   * @param findValue Entity search that is specified by some value
   * @param findWhere Child products search that is specified by field
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param returnGlobal Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @param useLatestApiVersion Use the latest platform API version
   */
  def productChildItemList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, productId: Option[String] = None, productIds: Option[String] = None, sku: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, currencyId: Option[String] = None, availSale: Option[Boolean] = None, findValue: Option[String] = None, findWhere: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, returnGlobal: Option[Boolean] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, reportRequestId: Option[String] = None, disableReportCache: Option[Boolean] = None, useLatestApiVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseProductChildItemList] =
    ApiRequest[ModelResponseProductChildItemList](ApiMethods.GET, baseUrl, "/product.child_item.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("product_id", productId)
      .withQueryParam("product_ids", productIds)
      .withQueryParam("sku", sku)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("currency_id", currencyId)
      .withQueryParam("avail_sale", availSale)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("return_global", returnGlobal)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("report_request_id", reportRequestId)
      .withQueryParam("disable_report_cache", disableReportCache)
      .withQueryParam("use_latest_api_version", useLatestApiVersion)
      .withSuccessResponse[ModelResponseProductChildItemList](200)
      

  /**
   * Count products in store.
   * 
   * Expected answers:
   *   code 200 : ProductCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productIds Counts products specified by product ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param categoriesIds Defines product add that is specified by comma-separated categories id
   * @param categoryId Counts products specified by category id
   * @param storeId Counts products specified by store id
   * @param langId Counts products specified by language id
   * @param availView Specifies the set of visible/invisible products
   * @param availSale Specifies the set of available/not available products for sale
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param brandName Retrieves brands specified by brand name
   * @param productAttributes Defines product attributes
   * @param status Defines product's status
   * @param `type` Defines products's type
   * @param visible Filter items by visibility status
   * @param findValue Entity search that is specified by some value
   * @param findWhere Counts products that are searched specified by field
   * @param reportRequestId Report request id
   * @param returnGlobal Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
   * @param disableReportCache Disable report cache for current request
   * @param useLatestApiVersion Use the latest platform API version
   */
  def productCount(productIds: Option[String] = None, sinceId: Option[String] = None, categoriesIds: Option[String] = None, categoryId: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, availView: Option[Boolean] = None, availSale: Option[Boolean] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, brandName: Option[String] = None, productAttributes: Seq[String], status: Option[String] = None, `type`: Option[String] = None, visible: Option[String] = None, findValue: Option[String] = None, findWhere: Option[String] = None, reportRequestId: Option[String] = None, returnGlobal: Option[Boolean] = None, disableReportCache: Option[Boolean] = None, useLatestApiVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductCount200Response] =
    ApiRequest[ProductCount200Response](ApiMethods.GET, baseUrl, "/product.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_ids", productIds)
      .withQueryParam("since_id", sinceId)
      .withQueryParam("categories_ids", categoriesIds)
      .withQueryParam("category_id", categoryId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("avail_view", availView)
      .withQueryParam("avail_sale", availSale)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("brand_name", brandName)
      .withQueryParam("product_attributes", ArrayValues(productAttributes, MULTI))
      .withQueryParam("status", status)
      .withQueryParam("type", `type`)
      .withQueryParam("visible", visible)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("report_request_id", reportRequestId)
      .withQueryParam("return_global", returnGlobal)
      .withQueryParam("disable_report_cache", disableReportCache)
      .withQueryParam("use_latest_api_version", useLatestApiVersion)
      .withSuccessResponse[ProductCount200Response](200)
      

  /**
   * Add currency and/or set default in store
   * 
   * Expected answers:
   *   code 200 : ProductCurrencyAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param iso3 Specifies standardized currency code
   * @param rate Defines the numerical identifier against to the major currency
   * @param name Defines currency's name
   * @param avail Specifies whether the currency is available
   * @param symbolLeft Defines the symbol that is located before the currency
   * @param symbolRight Defines the symbol that is located after the currency
   * @param default Specifies currency's default meaning
   */
  def productCurrencyAdd(iso3: String, rate: BigDecimal, name: Option[String] = None, avail: Option[Boolean] = None, symbolLeft: Option[String] = None, symbolRight: Option[String] = None, default: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductCurrencyAdd200Response] =
    ApiRequest[ProductCurrencyAdd200Response](ApiMethods.POST, baseUrl, "/product.currency.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("iso3", iso3)
      .withQueryParam("rate", rate)
      .withQueryParam("name", name)
      .withQueryParam("avail", avail)
      .withQueryParam("symbol_left", symbolLeft)
      .withQueryParam("symbol_right", symbolRight)
      .withQueryParam("default", default)
      .withSuccessResponse[ProductCurrencyAdd200Response](200)
      

  /**
   * Get list of currencies
   * 
   * Expected answers:
   *   code 200 : ModelResponseProductCurrencyList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param default Specifies the set of default/not default currencies
   * @param avail Specifies the set of available/not available currencies
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def productCurrencyList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, default: Option[Boolean] = None, avail: Option[Boolean] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseProductCurrencyList] =
    ApiRequest[ModelResponseProductCurrencyList](ApiMethods.GET, baseUrl, "/product.currency.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("default", default)
      .withQueryParam("avail", avail)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseProductCurrencyList](200)
      

  /**
   * Product delete
   * 
   * Expected answers:
   *   code 200 : CustomerDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Product id that will be removed
   * @param storeId Store Id
   */
  def productDelete(id: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CustomerDelete200Response] =
    ApiRequest[CustomerDelete200Response](ApiMethods.DELETE, baseUrl, "/product.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[CustomerDelete200Response](200)
      

  /**
   * Remove product from the store.
   * 
   * Expected answers:
   *   code 200 : CategoryAddBatch200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productDeleteBatch 
   */
  def productDeleteBatch(productDeleteBatch: ProductDeleteBatch)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CategoryAddBatch200Response] =
    ApiRequest[CategoryAddBatch200Response](ApiMethods.POST, baseUrl, "/product.delete.batch.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productDeleteBatch)
      .withSuccessResponse[CategoryAddBatch200Response](200)
      

  /**
   * Retrieve all available fields for product item in store.
   * 
   * Expected answers:
   *   code 200 : CartConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def productFields()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartConfigUpdate200Response] =
    ApiRequest[CartConfigUpdate200Response](ApiMethods.GET, baseUrl, "/product.fields.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[CartConfigUpdate200Response](200)
      

  /**
   * Search product in store catalog. \"Apple\" is specified here by default.
   * 
   * Expected answers:
   *   code 200 : ProductFind200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param findValue Entity search that is specified by some value
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findParams Entity search that is specified by comma-separated parameters
   * @param findWhat Parameter's value specifies the entity that has to be found
   * @param langId Search products specified by language id
   * @param storeId Store Id
   */
  def productFind(findValue: String, findWhere: Option[String] = None, findParams: Option[String] = None, findWhat: Option[String] = None, langId: Option[String] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductFind200Response] =
    ApiRequest[ProductFind200Response](ApiMethods.GET, baseUrl, "/product.find.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("find_params", findParams)
      .withQueryParam("find_what", findWhat)
      .withQueryParam("lang_id", langId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[ProductFind200Response](200)
      

  /**
   * Add image to product
   * 
   * Expected answers:
   *   code 200 : ProductImageAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productImageAdd 
   */
  def productImageAdd(productImageAdd: ProductImageAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductImageAdd200Response] =
    ApiRequest[ProductImageAdd200Response](ApiMethods.POST, baseUrl, "/product.image.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productImageAdd)
      .withSuccessResponse[ProductImageAdd200Response](200)
      

  /**
   * Delete image
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines product id where the image should be deleted
   * @param id Entity id
   * @param storeId Store Id
   */
  def productImageDelete(productId: String, id: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/product.image.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Update details of image
   * 
   * Expected answers:
   *   code 200 : ProductImageUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines product id where the image should be updated
   * @param id Defines image update specified by image id
   * @param variantIds Defines product's variants ids
   * @param storeId Store Id
   * @param langId Language id
   * @param imageName Defines image's name
   * @param `type` Defines image's types that are specified by comma-separated list
   * @param label Defines alternative text that has to be attached to the picture
   * @param position Defines image’s position in the list
   * @param hidden Define is hide image
   */
  def productImageUpdate(productId: String, id: String, variantIds: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, imageName: Option[String] = None, `type`: Option[String] = None, label: Option[String] = None, position: Option[Int] = None, hidden: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductImageUpdate200Response] =
    ApiRequest[ProductImageUpdate200Response](ApiMethods.PUT, baseUrl, "/product.image.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("id", id)
      .withQueryParam("variant_ids", variantIds)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("image_name", imageName)
      .withQueryParam("type", `type`)
      .withQueryParam("label", label)
      .withQueryParam("position", position)
      .withQueryParam("hidden", hidden)
      .withSuccessResponse[ProductImageUpdate200Response](200)
      

  /**
   * Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
   * 
   * Expected answers:
   *   code 200 : ProductInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Retrieves product's info specified by product id
   * @param storeId Retrieves product info specified by store id
   * @param langId Retrieves product info specified by language id
   * @param currencyId Currency Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @param useLatestApiVersion Use the latest platform API version
   */
  def productInfo(id: String, storeId: Option[String] = None, langId: Option[String] = None, currencyId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, reportRequestId: Option[String] = None, disableReportCache: Option[Boolean] = None, useLatestApiVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductInfo200Response] =
    ApiRequest[ProductInfo200Response](ApiMethods.GET, baseUrl, "/product.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("currency_id", currencyId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("report_request_id", reportRequestId)
      .withQueryParam("disable_report_cache", disableReportCache)
      .withQueryParam("use_latest_api_version", useLatestApiVersion)
      .withSuccessResponse[ProductInfo200Response](200)
      

  /**
   * Get list of products from your store. Returns 10 products by default.
   * 
   * Expected answers:
   *   code 200 : ModelResponseProductList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param productIds Retrieves products specified by product ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param categoriesIds Retrieves products specified by categories ids
   * @param categoryId Retrieves products specified by category id
   * @param storeId Retrieves products specified by store id
   * @param langId Retrieves products specified by language id
   * @param currencyId Currency Id
   * @param availView Specifies the set of visible/invisible products
   * @param availSale Specifies the set of available/not available products for sale
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param sku Filter by product's sku
   * @param brandName Retrieves brands specified by brand name
   * @param productAttributes Defines product attributes
   * @param status Defines product's status
   * @param `type` Defines products's type
   * @param visible Filter items by visibility status
   * @param findValue Entity search that is specified by some value
   * @param findWhere Product search that is specified by field
   * @param returnGlobal Determines the type of products to be returned. If set to 'true', only global products will be returned; if set to 'false', only local products will be returned.
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param sortBy Set field to sort by
   * @param sortDirection Set sorting direction
   * @param reportRequestId Report request id
   * @param disableCache Disable cache for current request
   * @param disableReportCache Disable report cache for current request
   * @param useLatestApiVersion Use the latest platform API version
   */
  def productList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, productIds: Option[String] = None, sinceId: Option[String] = None, categoriesIds: Option[String] = None, categoryId: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, currencyId: Option[String] = None, availView: Option[Boolean] = None, availSale: Option[Boolean] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, sku: Option[String] = None, brandName: Option[String] = None, productAttributes: Seq[String], status: Option[String] = None, `type`: Option[String] = None, visible: Option[String] = None, findValue: Option[String] = None, findWhere: Option[String] = None, returnGlobal: Option[Boolean] = None, params: Option[String] = None, responseFields: Option[String] = None, exclude: Option[String] = None, sortBy: Option[String] = None, sortDirection: Option[String] = None, reportRequestId: Option[String] = None, disableCache: Option[Boolean] = None, disableReportCache: Option[Boolean] = None, useLatestApiVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseProductList] =
    ApiRequest[ModelResponseProductList](ApiMethods.GET, baseUrl, "/product.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("product_ids", productIds)
      .withQueryParam("since_id", sinceId)
      .withQueryParam("categories_ids", categoriesIds)
      .withQueryParam("category_id", categoryId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("currency_id", currencyId)
      .withQueryParam("avail_view", availView)
      .withQueryParam("avail_sale", availSale)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("sku", sku)
      .withQueryParam("brand_name", brandName)
      .withQueryParam("product_attributes", ArrayValues(productAttributes, MULTI))
      .withQueryParam("status", status)
      .withQueryParam("type", `type`)
      .withQueryParam("visible", visible)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("return_global", returnGlobal)
      .withQueryParam("params", params)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("exclude", exclude)
      .withQueryParam("sort_by", sortBy)
      .withQueryParam("sort_direction", sortDirection)
      .withQueryParam("report_request_id", reportRequestId)
      .withQueryParam("disable_cache", disableCache)
      .withQueryParam("disable_report_cache", disableReportCache)
      .withQueryParam("use_latest_api_version", useLatestApiVersion)
      .withSuccessResponse[ModelResponseProductList](200)
      

  /**
   * Add manufacturer to store and assign to product
   * 
   * Expected answers:
   *   code 200 : ProductManufacturerAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines products specified by product id
   * @param manufacturer Defines product’s manufacturer's name
   * @param storeId Store Id
   */
  def productManufacturerAdd(productId: String, manufacturer: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductManufacturerAdd200Response] =
    ApiRequest[ProductManufacturerAdd200Response](ApiMethods.POST, baseUrl, "/product.manufacturer.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("manufacturer", manufacturer)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[ProductManufacturerAdd200Response](200)
      

  /**
   * Add product option from store.
   * 
   * Expected answers:
   *   code 200 : ProductOptionAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productOptionAdd 
   */
  def productOptionAdd(productOptionAdd: ProductOptionAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductOptionAdd200Response] =
    ApiRequest[ProductOptionAdd200Response](ApiMethods.POST, baseUrl, "/product.option.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productOptionAdd)
      .withSuccessResponse[ProductOptionAdd200Response](200)
      

  /**
   * Assign option from product.
   * 
   * Expected answers:
   *   code 200 : ProductOptionAssign200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines product id where the option should be assigned
   * @param optionId Defines option id which has to be assigned
   * @param required Defines if the option is required
   * @param sortOrder Sort number in the list
   * @param optionValues Defines option values that has to be assigned
   * @param clearCache Is cache clear required
   */
  def productOptionAssign(productId: String, optionId: String, required: Option[Boolean] = None, sortOrder: Option[Int] = None, optionValues: Option[String] = None, clearCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductOptionAssign200Response] =
    ApiRequest[ProductOptionAssign200Response](ApiMethods.POST, baseUrl, "/product.option.assign.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("option_id", optionId)
      .withQueryParam("required", required)
      .withQueryParam("sort_order", sortOrder)
      .withQueryParam("option_values", optionValues)
      .withQueryParam("clear_cache", clearCache)
      .withSuccessResponse[ProductOptionAssign200Response](200)
      

  /**
   * Product option delete.
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param optionId Defines option id that should be deleted
   * @param productId Defines product id where the option should be deleted
   * @param storeId Store Id
   */
  def productOptionDelete(optionId: String, productId: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/product.option.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("option_id", optionId)
      .withQueryParam("product_id", productId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Get list of options.
   * 
   * Expected answers:
   *   code 200 : ModelResponseProductOptionList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param productId Retrieves products' options specified by product id
   * @param langId Language id
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def productOptionList(start: Option[Int] = None, count: Option[Int] = None, productId: Option[String] = None, langId: Option[String] = None, storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseProductOptionList] =
    ApiRequest[ModelResponseProductOptionList](ApiMethods.GET, baseUrl, "/product.option.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("product_id", productId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseProductOptionList](200)
      

  /**
   * Add product option item from option.
   * 
   * Expected answers:
   *   code 200 : ProductOptionValueAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines product id where the option value should be added
   * @param optionId Defines option id where the value has to be added
   * @param optionValue Defines option value that has to be added
   * @param sortOrder Sort number in the list
   * @param displayValue Defines the value that will be displayed for the option value
   * @param isDefault Defines as a default
   * @param clearCache Is cache clear required
   */
  def productOptionValueAdd(productId: String, optionId: String, optionValue: Option[String] = None, sortOrder: Option[Int] = None, displayValue: Option[String] = None, isDefault: Option[Boolean] = None, clearCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductOptionValueAdd200Response] =
    ApiRequest[ProductOptionValueAdd200Response](ApiMethods.POST, baseUrl, "/product.option.value.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("option_id", optionId)
      .withQueryParam("option_value", optionValue)
      .withQueryParam("sort_order", sortOrder)
      .withQueryParam("display_value", displayValue)
      .withQueryParam("is_default", isDefault)
      .withQueryParam("clear_cache", clearCache)
      .withSuccessResponse[ProductOptionValueAdd200Response](200)
      

  /**
   * Assign product option item from product.
   * 
   * Expected answers:
   *   code 200 : ProductOptionValueAssign200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productOptionId Defines product's option id where the value has to be assigned
   * @param optionValueId Defines value id that has to be assigned
   * @param clearCache Is cache clear required
   */
  def productOptionValueAssign(productOptionId: Int, optionValueId: String, clearCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductOptionValueAssign200Response] =
    ApiRequest[ProductOptionValueAssign200Response](ApiMethods.POST, baseUrl, "/product.option.value.assign.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_option_id", productOptionId)
      .withQueryParam("option_value_id", optionValueId)
      .withQueryParam("clear_cache", clearCache)
      .withSuccessResponse[ProductOptionValueAssign200Response](200)
      

  /**
   * Product option value delete.
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param optionId Defines option id where the value should be deleted
   * @param optionValueId Defines option value id that should be deleted
   * @param productId Defines product id where the option value should be deleted
   * @param storeId Store Id
   */
  def productOptionValueDelete(optionId: String, optionValueId: String, productId: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/product.option.value.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("option_id", optionId)
      .withQueryParam("option_value_id", optionValueId)
      .withQueryParam("product_id", productId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Update product option item from option.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines product id where the option value should be updated
   * @param optionId Defines option id where the value has to be updated
   * @param optionValueId Defines value id that has to be assigned
   * @param optionValue Defines option value that has to be added
   * @param price Defines new product option price
   * @param quantity Defines new products' options quantity
   * @param displayValue Defines the value that will be displayed for the option value
   * @param clearCache Is cache clear required
   */
  def productOptionValueUpdate(productId: String, optionId: String, optionValueId: String, optionValue: Option[String] = None, price: Option[BigDecimal] = None, quantity: Option[BigDecimal] = None, displayValue: Option[String] = None, clearCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/product.option.value.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("option_id", optionId)
      .withQueryParam("option_value_id", optionValueId)
      .withQueryParam("option_value", optionValue)
      .withQueryParam("price", price)
      .withQueryParam("quantity", quantity)
      .withQueryParam("display_value", displayValue)
      .withQueryParam("clear_cache", clearCache)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Add some prices to the product.
   * 
   * Expected answers:
   *   code 200 : CartValidate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productPriceAdd 
   */
  def productPriceAdd(productPriceAdd: ProductPriceAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartValidate200Response] =
    ApiRequest[CartValidate200Response](ApiMethods.POST, baseUrl, "/product.price.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productPriceAdd)
      .withSuccessResponse[CartValidate200Response](200)
      

  /**
   * Delete some prices of the product
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines the product where the price has to be deleted
   * @param groupPrices Defines product's group prices
   * @param storeId Store Id
   */
  def productPriceDelete(productId: String, groupPrices: Option[String] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/product.price.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("group_prices", groupPrices)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Update some prices of the product.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productPriceUpdate 
   */
  def productPriceUpdate(productPriceUpdate: ProductPriceUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/product.price.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productPriceUpdate)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Get reviews of a specific product.
   * 
   * Expected answers:
   *   code 200 : ModelResponseProductReviewList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Product id
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param ids Retrieves reviews specified by ids
   * @param storeId Store Id
   * @param status Defines status
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def productReviewList(productId: String, start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, ids: Option[String] = None, storeId: Option[String] = None, status: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseProductReviewList] =
    ApiRequest[ModelResponseProductReviewList](ApiMethods.GET, baseUrl, "/product.review.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("product_id", productId)
      .withQueryParam("ids", ids)
      .withQueryParam("store_id", storeId)
      .withQueryParam("status", status)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseProductReviewList](200)
      

  /**
   * Assign product to store
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines id of the product which should be assigned to a store
   * @param storeId Defines id of the store product should be assigned to
   */
  def productStoreAssign(productId: String, storeId: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.POST, baseUrl, "/product.store.assign.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Add tax class and tax rate to store and assign to product.
   * 
   * Expected answers:
   *   code 200 : ProductTaxAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productTaxAdd 
   */
  def productTaxAdd(productTaxAdd: ProductTaxAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductTaxAdd200Response] =
    ApiRequest[ProductTaxAdd200Response](ApiMethods.POST, baseUrl, "/product.tax.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productTaxAdd)
      .withSuccessResponse[ProductTaxAdd200Response](200)
      

  /**
   * This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productUpdate 
   */
  def productUpdate(productUpdate: ProductUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/product.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productUpdate)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Update products on the store.
   * 
   * Expected answers:
   *   code 200 : CategoryAddBatch200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productUpdateBatch 
   */
  def productUpdateBatch(productUpdateBatch: ProductUpdateBatch)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CategoryAddBatch200Response] =
    ApiRequest[CategoryAddBatch200Response](ApiMethods.POST, baseUrl, "/product.update.batch.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productUpdateBatch)
      .withSuccessResponse[CategoryAddBatch200Response](200)
      

  /**
   * Add variant to product.
   * 
   * Expected answers:
   *   code 200 : ProductVariantAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantAdd 
   */
  def productVariantAdd(productVariantAdd: ProductVariantAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductVariantAdd200Response] =
    ApiRequest[ProductVariantAdd200Response](ApiMethods.POST, baseUrl, "/product.variant.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantAdd)
      .withSuccessResponse[ProductVariantAdd200Response](200)
      

  /**
   * Add new product variants to the store.
   * 
   * Expected answers:
   *   code 200 : CategoryAddBatch200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantAddBatch 
   */
  def productVariantAddBatch(productVariantAddBatch: ProductVariantAddBatch)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CategoryAddBatch200Response] =
    ApiRequest[CategoryAddBatch200Response](ApiMethods.POST, baseUrl, "/product.variant.add.batch.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantAddBatch)
      .withSuccessResponse[CategoryAddBatch200Response](200)
      

  /**
   * Get count variants.
   * 
   * Expected answers:
   *   code 200 : ProductVariantCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Retrieves products' variants specified by product id
   * @param categoryId Counts products’ variants specified by category id
   * @param storeId Retrieves variants specified by store id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   */
  def productVariantCount(productId: String, categoryId: Option[String] = None, storeId: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductVariantCount200Response] =
    ApiRequest[ProductVariantCount200Response](ApiMethods.GET, baseUrl, "/product.variant.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("category_id", categoryId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withSuccessResponse[ProductVariantCount200Response](200)
      

  /**
   * Delete variant.
   * 
   * Expected answers:
   *   code 200 : AttributeValueDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Defines variant removal, specified by variant id
   * @param productId Defines product's id where the variant has to be deleted
   * @param storeId Store Id
   */
  def productVariantDelete(id: String, productId: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeValueDelete200Response] =
    ApiRequest[AttributeValueDelete200Response](ApiMethods.DELETE, baseUrl, "/product.variant.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("product_id", productId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeValueDelete200Response](200)
      

  /**
   * Remove product variants from the store.
   * 
   * Expected answers:
   *   code 200 : CategoryAddBatch200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantDeleteBatch 
   */
  def productVariantDeleteBatch(productVariantDeleteBatch: ProductVariantDeleteBatch)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CategoryAddBatch200Response] =
    ApiRequest[CategoryAddBatch200Response](ApiMethods.POST, baseUrl, "/product.variant.delete.batch.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantDeleteBatch)
      .withSuccessResponse[CategoryAddBatch200Response](200)
      

  /**
   * Add image to product
   * 
   * Expected answers:
   *   code 200 : ProductVariantImageAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantImageAdd 
   */
  def productVariantImageAdd(productVariantImageAdd: ProductVariantImageAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductVariantImageAdd200Response] =
    ApiRequest[ProductVariantImageAdd200Response](ApiMethods.POST, baseUrl, "/product.variant.image.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantImageAdd)
      .withSuccessResponse[ProductVariantImageAdd200Response](200)
      

  /**
   * Delete  image to product
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productId Defines product id where the variant image should be deleted
   * @param productVariantId Defines product's variants specified by variant id
   * @param id Entity id
   * @param storeId Store Id
   */
  def productVariantImageDelete(productId: String, productVariantId: String, id: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/product.variant.image.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("product_id", productId)
      .withQueryParam("product_variant_id", productVariantId)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Get variant info. This method is deprecated, and its development is stopped. Please use \"product.child_item.info\" instead.
   * 
   * Expected answers:
   *   code 200 : ProductInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Retrieves variant's info specified by variant id
   * @param storeId Retrieves variant info specified by store id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def productVariantInfo(id: String, storeId: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductInfo200Response] =
    ApiRequest[ProductInfo200Response](ApiMethods.GET, baseUrl, "/product.variant.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ProductInfo200Response](200)
      

  /**
   * Get a list of variants. This method is deprecated, and its development is stopped. Please use \"product.child_item.list\" instead.
   * 
   * Expected answers:
   *   code 200 : ProductVariantList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param productId Retrieves products' variants specified by product id
   * @param categoryId Retrieves products’ variants specified by category id
   * @param storeId Retrieves variants specified by store id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def productVariantList(start: Option[Int] = None, count: Option[Int] = None, productId: Option[String] = None, categoryId: Option[String] = None, storeId: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductVariantList200Response] =
    ApiRequest[ProductVariantList200Response](ApiMethods.GET, baseUrl, "/product.variant.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("product_id", productId)
      .withQueryParam("category_id", categoryId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ProductVariantList200Response](200)
      

  /**
   * Add some prices to the product variant.
   * 
   * Expected answers:
   *   code 200 : CartValidate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantPriceAdd 
   */
  def productVariantPriceAdd(productVariantPriceAdd: ProductVariantPriceAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartValidate200Response] =
    ApiRequest[CartValidate200Response](ApiMethods.POST, baseUrl, "/product.variant.price.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantPriceAdd)
      .withSuccessResponse[CartValidate200Response](200)
      

  /**
   * Delete some prices of the product variant.
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Defines the variant where the price has to be deleted
   * @param productId Product id
   * @param groupPrices Defines variants's group prices
   * @param storeId Store Id
   */
  def productVariantPriceDelete(id: String, productId: String, groupPrices: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/product.variant.price.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("product_id", productId)
      .withQueryParam("group_prices", groupPrices)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Update some prices of the product variant.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantPriceUpdate 
   */
  def productVariantPriceUpdate(productVariantPriceUpdate: ProductVariantPriceUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/product.variant.price.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantPriceUpdate)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Update variant.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantUpdate 
   */
  def productVariantUpdate(productVariantUpdate: ProductVariantUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/product.variant.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantUpdate)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Update products variants on the store.
   * 
   * Expected answers:
   *   code 200 : CategoryAddBatch200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param productVariantUpdateBatch 
   */
  def productVariantUpdateBatch(productVariantUpdateBatch: ProductVariantUpdateBatch)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CategoryAddBatch200Response] =
    ApiRequest[CategoryAddBatch200Response](ApiMethods.POST, baseUrl, "/product.variant.update.batch.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(productVariantUpdateBatch)
      .withSuccessResponse[CategoryAddBatch200Response](200)
      



}

