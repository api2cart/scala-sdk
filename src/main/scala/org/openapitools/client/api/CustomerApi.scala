/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AccountConfigUpdate200Response
import org.openapitools.client.model.AttributeAdd200Response
import org.openapitools.client.model.CustomerAdd
import org.openapitools.client.model.CustomerAdd200Response
import org.openapitools.client.model.CustomerAddressAdd
import org.openapitools.client.model.CustomerCount200Response
import org.openapitools.client.model.CustomerDelete200Response
import org.openapitools.client.model.CustomerFind200Response
import org.openapitools.client.model.CustomerGroupAdd200Response
import org.openapitools.client.model.CustomerInfo200Response
import org.openapitools.client.model.CustomerUpdate
import org.openapitools.client.model.ModelResponseCustomerAttributeList
import org.openapitools.client.model.ModelResponseCustomerGroupList
import org.openapitools.client.model.ModelResponseCustomerList
import org.openapitools.client.model.ModelResponseCustomerWishlistList
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object CustomerApi {

  def apply(baseUrl: String = "https://api.api2cart.local.com/v1.1") = new CustomerApi(baseUrl)
}

class CustomerApi(baseUrl: String) {

  /**
   * Add customer into store.
   * 
   * Expected answers:
   *   code 200 : CustomerAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param customerAdd 
   */
  def customerAdd(customerAdd: CustomerAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CustomerAdd200Response] =
    ApiRequest[CustomerAdd200Response](ApiMethods.POST, baseUrl, "/customer.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(customerAdd)
      .withSuccessResponse[CustomerAdd200Response](200)
      

  /**
   * Add customer address.
   * 
   * Expected answers:
   *   code 200 : AttributeAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param customerAddressAdd 
   */
  def customerAddressAdd(customerAddressAdd: CustomerAddressAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeAdd200Response] =
    ApiRequest[AttributeAdd200Response](ApiMethods.POST, baseUrl, "/customer.address.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(customerAddressAdd)
      .withSuccessResponse[AttributeAdd200Response](200)
      

  /**
   * Get attributes for specific customer
   * 
   * Expected answers:
   *   code 200 : ModelResponseCustomerAttributeList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param customerId Retrieves orders specified by customer id
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param storeId Store Id
   * @param langId Language id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def customerAttributeList(customerId: String, count: Option[Int] = None, pageCursor: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCustomerAttributeList] =
    ApiRequest[ModelResponseCustomerAttributeList](ApiMethods.GET, baseUrl, "/customer.attribute.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCustomerAttributeList](200)
      

  /**
   * Get number of customers from store.
   * 
   * Expected answers:
   *   code 200 : CustomerCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param ids Counts customers specified by ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param customerListId The numeric ID of the customer list in Demandware.
   * @param groupId Customer group_id
   * @param storeId Counts customer specified by store id
   * @param avail Defines category's visibility status
   * @param includeGuests Indicates whether to include guest customers in the total count.
   * @param findValue Entity search that is specified by some value
   * @param findWhere Counts customers that are searched specified by field
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   */
  def customerCount(ids: Option[String] = None, sinceId: Option[String] = None, customerListId: Option[String] = None, groupId: Option[String] = None, storeId: Option[String] = None, avail: Option[Boolean] = None, includeGuests: Option[Boolean] = None, findValue: Option[String] = None, findWhere: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CustomerCount200Response] =
    ApiRequest[CustomerCount200Response](ApiMethods.GET, baseUrl, "/customer.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("ids", ids)
      .withQueryParam("since_id", sinceId)
      .withQueryParam("customer_list_id", customerListId)
      .withQueryParam("group_id", groupId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("avail", avail)
      .withQueryParam("include_guests", includeGuests)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withSuccessResponse[CustomerCount200Response](200)
      

  /**
   * Delete customer from store.
   * 
   * Expected answers:
   *   code 200 : CustomerDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Identifies customer specified by the id
   */
  def customerDelete(id: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CustomerDelete200Response] =
    ApiRequest[CustomerDelete200Response](ApiMethods.DELETE, baseUrl, "/customer.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withSuccessResponse[CustomerDelete200Response](200)
      

  /**
   * Find customers in store.
   * 
   * Expected answers:
   *   code 200 : CustomerFind200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param findValue Entity search that is specified by some value
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findParams Entity search that is specified by comma-separated parameters
   * @param storeId Store Id
   * @param includeGuests Indicates whether to search among guest customers when looking up a customer.
   */
  def customerFind(findValue: String, findWhere: Option[String] = None, findParams: Option[String] = None, storeId: Option[String] = None, includeGuests: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CustomerFind200Response] =
    ApiRequest[CustomerFind200Response](ApiMethods.GET, baseUrl, "/customer.find.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("find_params", findParams)
      .withQueryParam("store_id", storeId)
      .withQueryParam("include_guests", includeGuests)
      .withSuccessResponse[CustomerFind200Response](200)
      

  /**
   * Create customer group.
   * 
   * Expected answers:
   *   code 200 : CustomerGroupAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param name Customer group name
   * @param storeId Store Id
   * @param storesIds Assign customer group to the stores that is specified by comma-separated stores' id
   */
  def customerGroupAdd(name: String, storeId: Option[String] = None, storesIds: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CustomerGroupAdd200Response] =
    ApiRequest[CustomerGroupAdd200Response](ApiMethods.POST, baseUrl, "/customer.group.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("name", name)
      .withQueryParam("store_id", storeId)
      .withQueryParam("stores_ids", storesIds)
      .withSuccessResponse[CustomerGroupAdd200Response](200)
      

  /**
   * Get list of customers groups.
   * 
   * Expected answers:
   *   code 200 : ModelResponseCustomerGroupList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param groupIds Groups that will be assigned to a customer
   * @param storeId Store Id
   * @param langId Language id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param disableCache Disable cache for current request
   */
  def customerGroupList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, groupIds: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, disableCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCustomerGroupList] =
    ApiRequest[ModelResponseCustomerGroupList](ApiMethods.GET, baseUrl, "/customer.group.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("group_ids", groupIds)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("disable_cache", disableCache)
      .withSuccessResponse[ModelResponseCustomerGroupList](200)
      

  /**
   * Get customers' details from store.
   * 
   * Expected answers:
   *   code 200 : CustomerInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Retrieves customer's info specified by customer id
   * @param storeId Retrieves customer info specified by store id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def customerInfo(id: String, storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CustomerInfo200Response] =
    ApiRequest[CustomerInfo200Response](ApiMethods.GET, baseUrl, "/customer.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[CustomerInfo200Response](200)
      

  /**
   * Get list of customers from store.
   * 
   * Expected answers:
   *   code 200 : ModelResponseCustomerList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param ids Retrieves customers specified by ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param customerListId The numeric ID of the customer list in Demandware.
   * @param groupId Customer group_id
   * @param storeId Retrieves customers specified by store id
   * @param avail Defines category's visibility status
   * @param includeGuests Indicates whether to include guest customers in the list results.
   * @param findValue Entity search that is specified by some value
   * @param findWhere Customer search that is specified by field
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param sortBy Set field to sort by
   * @param sortDirection Set sorting direction
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def customerList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, ids: Option[String] = None, sinceId: Option[String] = None, customerListId: Option[String] = None, groupId: Option[String] = None, storeId: Option[String] = None, avail: Option[Boolean] = None, includeGuests: Option[Boolean] = None, findValue: Option[String] = None, findWhere: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, sortBy: Option[String] = None, sortDirection: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCustomerList] =
    ApiRequest[ModelResponseCustomerList](ApiMethods.GET, baseUrl, "/customer.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("ids", ids)
      .withQueryParam("since_id", sinceId)
      .withQueryParam("customer_list_id", customerListId)
      .withQueryParam("group_id", groupId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("avail", avail)
      .withQueryParam("include_guests", includeGuests)
      .withQueryParam("find_value", findValue)
      .withQueryParam("find_where", findWhere)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("sort_by", sortBy)
      .withQueryParam("sort_direction", sortDirection)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCustomerList](200)
      

  /**
   * Update information of customer in store.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param customerUpdate 
   */
  def customerUpdate(customerUpdate: CustomerUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/customer.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(customerUpdate)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Get a Wish List of customer from the store.
   * 
   * Expected answers:
   *   code 200 : ModelResponseCustomerWishlistList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param customerId Retrieves orders specified by customer id
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param id Entity id
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   */
  def customerWishlistList(customerId: String, start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, id: Option[String] = None, storeId: Option[String] = None, responseFields: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCustomerWishlistList] =
    ApiRequest[ModelResponseCustomerWishlistList](ApiMethods.GET, baseUrl, "/customer.wishlist.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withSuccessResponse[ModelResponseCustomerWishlistList](200)
      



}

