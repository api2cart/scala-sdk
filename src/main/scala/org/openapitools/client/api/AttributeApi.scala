/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AttributeAdd200Response
import org.openapitools.client.model.AttributeAssignGroup200Response
import org.openapitools.client.model.AttributeCount200Response
import org.openapitools.client.model.AttributeDelete200Response
import org.openapitools.client.model.AttributeInfo200Response
import org.openapitools.client.model.AttributeTypeList200Response
import org.openapitools.client.model.AttributeUnassignGroup200Response
import org.openapitools.client.model.AttributeUpdate200Response
import org.openapitools.client.model.AttributeValueDelete200Response
import org.openapitools.client.model.ModelResponseAttributeAttributesetList
import org.openapitools.client.model.ModelResponseAttributeGroupList
import org.openapitools.client.model.ModelResponseAttributeList
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object AttributeApi {

  def apply(baseUrl: String = "https://api.api2cart.com/v1.1") = new AttributeApi(baseUrl)
}

class AttributeApi(baseUrl: String) {

  /**
   * Add new attribute
   * 
   * Expected answers:
   *   code 200 : AttributeAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param `type` Defines attribute's type
   * @param name Defines attributes's name
   * @param code Entity code
   * @param storeId Store Id
   * @param langId Language id
   * @param visible Set visibility status
   * @param required Defines if the option is required
   * @param position Attribute`s position
   * @param attributeGroupId Filter by attribute_group_id
   * @param isGlobal Attribute saving scope
   * @param isSearchable Use attribute in Quick Search
   * @param isFilterable Use In Layered Navigation
   * @param isComparable Comparable on Front-end
   * @param isHtmlAllowedOnFront Allow HTML Tags on Frontend
   * @param isFilterableInSearch Use In Search Results Layered Navigation
   * @param isConfigurable Use To Create Configurable Product
   * @param isVisibleInAdvancedSearch Use in Advanced Search
   * @param isUsedForPromoRules Use for Promo Rule Conditions
   * @param usedInProductListing Used in Product Listing
   * @param usedForSortBy Used for Sorting in Product Listing
   * @param applyTo Types of products which can have this attribute
   */
  def attributeAdd(`type`: String, name: String, code: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, visible: Option[Boolean] = None, required: Option[Boolean] = None, position: Option[Int] = None, attributeGroupId: Option[String] = None, isGlobal: Option[String] = None, isSearchable: Option[Boolean] = None, isFilterable: Option[String] = None, isComparable: Option[Boolean] = None, isHtmlAllowedOnFront: Option[Boolean] = None, isFilterableInSearch: Option[Boolean] = None, isConfigurable: Option[Boolean] = None, isVisibleInAdvancedSearch: Option[Boolean] = None, isUsedForPromoRules: Option[Boolean] = None, usedInProductListing: Option[Boolean] = None, usedForSortBy: Option[Boolean] = None, applyTo: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeAdd200Response] =
    ApiRequest[AttributeAdd200Response](ApiMethods.POST, baseUrl, "/attribute.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("type", `type`)
      .withQueryParam("code", code)
      .withQueryParam("name", name)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("visible", visible)
      .withQueryParam("required", required)
      .withQueryParam("position", position)
      .withQueryParam("attribute_group_id", attributeGroupId)
      .withQueryParam("is_global", isGlobal)
      .withQueryParam("is_searchable", isSearchable)
      .withQueryParam("is_filterable", isFilterable)
      .withQueryParam("is_comparable", isComparable)
      .withQueryParam("is_html_allowed_on_front", isHtmlAllowedOnFront)
      .withQueryParam("is_filterable_in_search", isFilterableInSearch)
      .withQueryParam("is_configurable", isConfigurable)
      .withQueryParam("is_visible_in_advanced_search", isVisibleInAdvancedSearch)
      .withQueryParam("is_used_for_promo_rules", isUsedForPromoRules)
      .withQueryParam("used_in_product_listing", usedInProductListing)
      .withQueryParam("used_for_sort_by", usedForSortBy)
      .withQueryParam("apply_to", applyTo)
      .withSuccessResponse[AttributeAdd200Response](200)
      

  /**
   * Assign attribute to the group
   * 
   * Expected answers:
   *   code 200 : AttributeAssignGroup200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param groupId Attribute group_id
   * @param attributeSetId Attribute set id
   */
  def attributeAssignGroup(id: String, groupId: String, attributeSetId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeAssignGroup200Response] =
    ApiRequest[AttributeAssignGroup200Response](ApiMethods.POST, baseUrl, "/attribute.assign.group.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("group_id", groupId)
      .withQueryParam("attribute_set_id", attributeSetId)
      .withSuccessResponse[AttributeAssignGroup200Response](200)
      

  /**
   * Assign attribute to the attribute set
   * 
   * Expected answers:
   *   code 200 : AttributeAssignGroup200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param attributeSetId Attribute set id
   * @param groupId Attribute group_id
   */
  def attributeAssignSet(id: String, attributeSetId: String, groupId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeAssignGroup200Response] =
    ApiRequest[AttributeAssignGroup200Response](ApiMethods.POST, baseUrl, "/attribute.assign.set.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("group_id", groupId)
      .withQueryParam("attribute_set_id", attributeSetId)
      .withSuccessResponse[AttributeAssignGroup200Response](200)
      

  /**
   * Get attribute_set list
   * 
   * Expected answers:
   *   code 200 : ModelResponseAttributeAttributesetList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   */
  def attributeAttributesetList(start: Option[Int] = None, count: Option[Int] = None, params: Option[String] = None, exclude: Option[String] = None, responseFields: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseAttributeAttributesetList] =
    ApiRequest[ModelResponseAttributeAttributesetList](ApiMethods.GET, baseUrl, "/attribute.attributeset.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("response_fields", responseFields)
      .withSuccessResponse[ModelResponseAttributeAttributesetList](200)
      

  /**
   * Get attributes count
   * 
   * Expected answers:
   *   code 200 : AttributeCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param `type` Defines attribute's type
   * @param attributeSetId Filter items by attribute set id
   * @param storeId Store Id
   * @param langId Language id
   * @param visible Filter items by visibility status
   * @param required Defines if the option is required
   * @param system True if attribute is system
   */
  def attributeCount(`type`: Option[String] = None, attributeSetId: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, visible: Option[Boolean] = None, required: Option[Boolean] = None, system: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeCount200Response] =
    ApiRequest[AttributeCount200Response](ApiMethods.GET, baseUrl, "/attribute.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("type", `type`)
      .withQueryParam("attribute_set_id", attributeSetId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("visible", visible)
      .withQueryParam("required", required)
      .withQueryParam("system", system)
      .withSuccessResponse[AttributeCount200Response](200)
      

  /**
   * Delete attribute from store
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param storeId Store Id
   */
  def attributeDelete(id: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/attribute.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("store_id", storeId)
      .withQueryParam("id", id)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Get attribute group list
   * 
   * Expected answers:
   *   code 200 : ModelResponseAttributeGroupList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param langId Language id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param attributeSetId Attribute set id
   */
  def attributeGroupList(start: Option[Int] = None, count: Option[Int] = None, langId: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, responseFields: Option[String] = None, attributeSetId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseAttributeGroupList] =
    ApiRequest[ModelResponseAttributeGroupList](ApiMethods.GET, baseUrl, "/attribute.group.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("lang_id", langId)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("attribute_set_id", attributeSetId)
      .withSuccessResponse[ModelResponseAttributeGroupList](200)
      

  /**
   * Get information about a specific global attribute by its ID.
   * 
   * Expected answers:
   *   code 200 : AttributeInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param attributeSetId Attribute set id
   * @param storeId Store Id
   * @param langId Language id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   */
  def attributeInfo(id: String, attributeSetId: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, responseFields: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeInfo200Response] =
    ApiRequest[AttributeInfo200Response](ApiMethods.GET, baseUrl, "/attribute.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("attribute_set_id", attributeSetId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("response_fields", responseFields)
      .withSuccessResponse[AttributeInfo200Response](200)
      

  /**
   * Get a list of global attributes.
   * 
   * Expected answers:
   *   code 200 : ModelResponseAttributeList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param `type` Defines attribute's type
   * @param attributeIds Filter attributes by ids
   * @param attributeSetId Filter items by attribute set id
   * @param storeId Store Id
   * @param langId Retrieves attributes on specified language id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param visible Filter items by visibility status
   * @param required Defines if the option is required
   * @param system True if attribute is system
   */
  def attributeList(start: Option[Int] = None, count: Option[Int] = None, `type`: Option[String] = None, attributeIds: Option[String] = None, attributeSetId: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, responseFields: Option[String] = None, visible: Option[Boolean] = None, required: Option[Boolean] = None, system: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseAttributeList] =
    ApiRequest[ModelResponseAttributeList](ApiMethods.GET, baseUrl, "/attribute.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("type", `type`)
      .withQueryParam("attribute_ids", attributeIds)
      .withQueryParam("attribute_set_id", attributeSetId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("visible", visible)
      .withQueryParam("required", required)
      .withQueryParam("system", system)
      .withSuccessResponse[ModelResponseAttributeList](200)
      

  /**
   * Get list of supported attributes types
   * 
   * Expected answers:
   *   code 200 : AttributeTypeList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def attributeTypeList()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeTypeList200Response] =
    ApiRequest[AttributeTypeList200Response](ApiMethods.GET, baseUrl, "/attribute.type.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[AttributeTypeList200Response](200)
      

  /**
   * Unassign attribute from group
   * 
   * Expected answers:
   *   code 200 : AttributeUnassignGroup200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param groupId Customer group_id
   */
  def attributeUnassignGroup(id: String, groupId: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeUnassignGroup200Response] =
    ApiRequest[AttributeUnassignGroup200Response](ApiMethods.POST, baseUrl, "/attribute.unassign.group.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("group_id", groupId)
      .withSuccessResponse[AttributeUnassignGroup200Response](200)
      

  /**
   * Unassign attribute from attribute set
   * 
   * Expected answers:
   *   code 200 : AttributeUnassignGroup200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param attributeSetId Attribute set id
   */
  def attributeUnassignSet(id: String, attributeSetId: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeUnassignGroup200Response] =
    ApiRequest[AttributeUnassignGroup200Response](ApiMethods.POST, baseUrl, "/attribute.unassign.set.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("attribute_set_id", attributeSetId)
      .withSuccessResponse[AttributeUnassignGroup200Response](200)
      

  /**
   * Update attribute data
   * 
   * Expected answers:
   *   code 200 : AttributeUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param name Defines new attributes's name
   * @param storeId Store Id
   * @param langId Language id
   */
  def attributeUpdate(id: String, name: String, storeId: Option[String] = None, langId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeUpdate200Response] =
    ApiRequest[AttributeUpdate200Response](ApiMethods.PUT, baseUrl, "/attribute.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("name", name)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withSuccessResponse[AttributeUpdate200Response](200)
      

  /**
   * Add new value to attribute.
   * 
   * Expected answers:
   *   code 200 : AttributeAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param attributeId Attribute Id
   * @param name Defines attribute value's name
   * @param code Entity code
   * @param description Defines attribute value's description
   * @param storeId Store Id
   * @param langId Language id
   */
  def attributeValueAdd(attributeId: String, name: String, code: Option[String] = None, description: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeAdd200Response] =
    ApiRequest[AttributeAdd200Response](ApiMethods.POST, baseUrl, "/attribute.value.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("attribute_id", attributeId)
      .withQueryParam("name", name)
      .withQueryParam("code", code)
      .withQueryParam("description", description)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withSuccessResponse[AttributeAdd200Response](200)
      

  /**
   * Delete attribute value.
   * 
   * Expected answers:
   *   code 200 : AttributeValueDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param attributeId Attribute Id
   * @param storeId Store Id
   */
  def attributeValueDelete(id: String, attributeId: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeValueDelete200Response] =
    ApiRequest[AttributeValueDelete200Response](ApiMethods.DELETE, baseUrl, "/attribute.value.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("attribute_id", attributeId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeValueDelete200Response](200)
      

  /**
   * Update attribute value.
   * 
   * Expected answers:
   *   code 200 : AttributeUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Defines attribute value's id
   * @param attributeId Attribute Id
   * @param name Defines attribute value's name
   * @param description Defines new attribute value's description
   * @param code Entity code
   * @param storeId Store Id
   * @param langId Language id
   */
  def attributeValueUpdate(id: String, attributeId: String, name: Option[String] = None, description: Option[String] = None, code: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeUpdate200Response] =
    ApiRequest[AttributeUpdate200Response](ApiMethods.PUT, baseUrl, "/attribute.value.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("attribute_id", attributeId)
      .withQueryParam("name", name)
      .withQueryParam("description", description)
      .withQueryParam("code", code)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withSuccessResponse[AttributeUpdate200Response](200)
      



}

