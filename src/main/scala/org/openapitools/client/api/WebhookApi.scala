/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AttributeDelete200Response
import org.openapitools.client.model.BasketLiveShippingServiceCreate200Response
import org.openapitools.client.model.ProductImageUpdate200Response
import org.openapitools.client.model.WebhookCount200Response
import org.openapitools.client.model.WebhookEvents200Response
import org.openapitools.client.model.WebhookList200Response
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object WebhookApi {

  def apply(baseUrl: String = "https://api.api2cart.com/v1.1") = new WebhookApi(baseUrl)
}

class WebhookApi(baseUrl: String) {

  /**
   * Count registered webhooks on the store.
   * 
   * Expected answers:
   *   code 200 : WebhookCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param entity The entity you want to filter webhooks by (e.g. order or product)
   * @param action The action you want to filter webhooks by (e.g. order or product)
   * @param active The webhook status you want to filter webhooks by
   */
  def webhookCount(entity: Option[String] = None, action: Option[String] = None, active: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[WebhookCount200Response] =
    ApiRequest[WebhookCount200Response](ApiMethods.GET, baseUrl, "/webhook.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("entity", entity)
      .withQueryParam("action", action)
      .withQueryParam("active", active)
      .withSuccessResponse[WebhookCount200Response](200)
      

  /**
   * Create webhook on the store and subscribe to it.
   * 
   * Expected answers:
   *   code 200 : BasketLiveShippingServiceCreate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
   * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update)
   * @param callback Callback url that returns shipping rates. It should be able to accept POST requests with json data.
   * @param label The name you give to the webhook
   * @param fields Fields the webhook should send
   * @param active Webhook status
   * @param langId Language id
   * @param storeId Defines store id where the webhook should be assigned
   */
  def webhookCreate(entity: String, action: String, callback: Option[String] = None, label: Option[String] = None, fields: Option[String] = None, active: Option[Boolean] = None, langId: Option[String] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketLiveShippingServiceCreate200Response] =
    ApiRequest[BasketLiveShippingServiceCreate200Response](ApiMethods.POST, baseUrl, "/webhook.create.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("entity", entity)
      .withQueryParam("action", action)
      .withQueryParam("callback", callback)
      .withQueryParam("label", label)
      .withQueryParam("fields", fields)
      .withQueryParam("active", active)
      .withQueryParam("lang_id", langId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[BasketLiveShippingServiceCreate200Response](200)
      

  /**
   * Delete registered webhook on the store.
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Webhook id
   */
  def webhookDelete(id: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/webhook.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * List all Webhooks that are available on this store.
   * 
   * Expected answers:
   *   code 200 : WebhookEvents200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def webhookEvents()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[WebhookEvents200Response] =
    ApiRequest[WebhookEvents200Response](ApiMethods.GET, baseUrl, "/webhook.events.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[WebhookEvents200Response](200)
      

  /**
   * List registered webhook on the store.
   * 
   * Expected answers:
   *   code 200 : WebhookList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param entity The entity you want to filter webhooks by (e.g. order or product)
   * @param action The action you want to filter webhooks by (e.g. add, update, or delete)
   * @param active The webhook status you want to filter webhooks by
   * @param ids List of —Åomma-separated webhook ids
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   */
  def webhookList(start: Option[Int] = None, count: Option[Int] = None, entity: Option[String] = None, action: Option[String] = None, active: Option[Boolean] = None, ids: Option[String] = None, params: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[WebhookList200Response] =
    ApiRequest[WebhookList200Response](ApiMethods.GET, baseUrl, "/webhook.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("entity", entity)
      .withQueryParam("action", action)
      .withQueryParam("active", active)
      .withQueryParam("ids", ids)
      .withQueryParam("params", params)
      .withSuccessResponse[WebhookList200Response](200)
      

  /**
   * Update Webhooks parameters.
   * 
   * Expected answers:
   *   code 200 : ProductImageUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Webhook id
   * @param callback Callback url that returns shipping rates. It should be able to accept POST requests with json data.
   * @param label The name you give to the webhook
   * @param fields Fields the webhook should send
   * @param active Webhook status
   * @param langId Language id
   */
  def webhookUpdate(id: String, callback: Option[String] = None, label: Option[String] = None, fields: Option[String] = None, active: Option[Boolean] = None, langId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ProductImageUpdate200Response] =
    ApiRequest[ProductImageUpdate200Response](ApiMethods.PUT, baseUrl, "/webhook.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("callback", callback)
      .withQueryParam("label", label)
      .withQueryParam("fields", fields)
      .withQueryParam("active", active)
      .withQueryParam("lang_id", langId)
      .withSuccessResponse[ProductImageUpdate200Response](200)
      



}

