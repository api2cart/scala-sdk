/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AccountCartAdd
import org.openapitools.client.model.AccountCartAdd200Response
import org.openapitools.client.model.AccountCartList200Response
import org.openapitools.client.model.AccountConfigUpdate200Response
import org.openapitools.client.model.AccountFailedWebhooks200Response
import org.openapitools.client.model.AccountSupportedPlatforms200Response
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object AccountApi {

  def apply(baseUrl: String = "https://api.api2cart.local.com/v1.1") = new AccountApi(baseUrl)
}

class AccountApi(baseUrl: String) {

  /**
   * Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
   * 
   * Expected answers:
   *   code 200 : AccountCartAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   * 
   * @param accountCartAdd 
   */
  def accountCartAdd(accountCartAdd: AccountCartAdd)(implicit apiKey: ApiKeyValue): ApiRequest[AccountCartAdd200Response] =
    ApiRequest[AccountCartAdd200Response](ApiMethods.POST, baseUrl, "/account.cart.add.json", "application/json")
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(accountCartAdd)
      .withSuccessResponse[AccountCartAdd200Response](200)
      

  /**
   * This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
   * 
   * Expected answers:
   *   code 200 : AccountCartList200Response (successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   * 
   * @param storeUrl A web address of a store
   * @param storeKey Find store by store key
   * @param requestFromDate Retrieve entities from their creation date
   * @param requestToDate Retrieve entities to their creation date
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def accountCartList(storeUrl: Option[String] = None, storeKey: Option[String] = None, requestFromDate: Option[String] = None, requestToDate: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[AccountCartList200Response] =
    ApiRequest[AccountCartList200Response](ApiMethods.GET, baseUrl, "/account.cart.list.json", "application/json")
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("store_url", storeUrl)
      .withQueryParam("store_key", storeKey)
      .withQueryParam("request_from_date", requestFromDate)
      .withQueryParam("request_to_date", requestToDate)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[AccountCartList200Response](200)
      

  /**
   * Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param replaceParameters Identifies if there is a necessity to replace parameters
   * @param newStoreUrl The web address of the store you want to update to connect to API2Cart
   * @param newStoreKey Update store key
   * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
   * @param storeRoot Absolute path to the store root directory (used with \"bridge_url\" parameter)
   * @param dbTablesPrefix DB tables prefix
   * @param userAgent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values.
   * @param `3dcartPrivateKey` 3DCart Private Key
   * @param `3dcartAccessToken` 3DCart Token
   * @param `3dcartapiApiKey` 3DCart API Key
   * @param amazonSpClientId Amazon SP API app client id
   * @param amazonSpClientSecret Amazon SP API app client secret
   * @param amazonSpRefreshToken Amazon SP API OAuth refresh token
   * @param amazonSpAwsRegion Amazon AWS Region
   * @param amazonSpApiEnvironment Amazon SP API environment
   * @param amazonSellerId Amazon Seller ID (Merchant token)
   * @param aspdotnetstorefrontApiUser It's a AspDotNetStorefront account for which API is available
   * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password
   * @param bigcommerceapiAdminAccount It's a BigCommerce account for which API is enabled
   * @param bigcommerceapiApiPath BigCommerce API URL
   * @param bigcommerceapiApiKey Bigcommerce API Key
   * @param bigcommerceapiClientId Client ID of the requesting app
   * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param bigcommerceapiContext API Path section unique to the store
   * @param bolApiKey Bol API Key
   * @param bolApiSecret Bol API Secret
   * @param bolRetailerId Bol Retailer ID
   * @param demandwareClientId Demandware client id
   * @param demandwareApiPassword Demandware api password
   * @param demandwareUserName Demandware user name
   * @param demandwareUserPassword Demandware user password
   * @param ebayClientId Application ID (AppID).
   * @param ebayClientSecret Shared Secret from eBay application
   * @param ebayRuname The RuName value that eBay assigns to your application.
   * @param ebayAccessToken Used to authenticate API requests.
   * @param ebayRefreshToken Used to renew the access token.
   * @param ebayEnvironment eBay environment
   * @param ebaySiteId eBay global ID
   * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user
   * @param ecwidStoreId Store Id
   * @param lazadaAppId Lazada App ID
   * @param lazadaAppSecret Lazada App Secret
   * @param lazadaRefreshToken Lazada Refresh Token
   * @param lazadaRegion Lazada API endpoint Region
   * @param etsyKeystring Etsy keystring
   * @param etsySharedSecret Etsy shared secret
   * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user
   * @param etsyClientId Etsy Client Id
   * @param etsyRefreshToken Etsy Refresh token
   * @param facebookAppId Facebook App ID
   * @param facebookAppSecret Facebook App Secret
   * @param facebookAccessToken Facebook Access Token
   * @param facebookBusinessId Facebook Business ID
   * @param netoApiKey Neto API Key
   * @param netoApiUsername Neto User Name
   * @param shoplineAccessToken Shopline APP Key
   * @param shoplineAppKey Shopline APP Key
   * @param shoplineAppSecret Shopline App Secret
   * @param shoplineSharedSecret Shopline Shared Secret
   * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param shopifyApiKey Shopify API Key
   * @param shopifyApiPassword Shopify API Password
   * @param shopifySharedSecret Shared secret
   * @param shopeePartnerId Shopee Partner ID
   * @param shopeePartnerKey Shopee Partner Key
   * @param shopeeShopId Shopee SHOP ID
   * @param shopeeRefreshToken Shopee Refresh Token
   * @param shopeeRegion Shopee API endpoint Region. Use for Chinese Mainland or Brazil.
   * @param shopeeEnvironment Shopee Environment
   * @param shoplazzaAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param shoplazzaSharedSecret Shared secret
   * @param mivaAccessToken Miva access token
   * @param mivaSignature Miva signature
   * @param shopwareAccessKey Shopware access key
   * @param shopwareApiKey Shopware api key
   * @param shopwareApiSecret Shopware client secret access key
   * @param bigcartelUserName Subdomain of store
   * @param bigcartelPassword BigCartel account password
   * @param bricklinkConsumerKey Bricklink Consumer Key
   * @param bricklinkConsumerSecret Bricklink Consumer Secret
   * @param bricklinkToken Bricklink Access Token
   * @param bricklinkTokenSecret Bricklink Access Token Secret
   * @param volusionLogin It's a Volusion account for which API is enabled
   * @param volusionPassword Volusion API Password
   * @param walmartClientId Walmart client ID. For the region 'ca' use Consumer ID
   * @param walmartClientSecret Walmart client secret. For the region 'ca' use Private Key
   * @param walmartEnvironment Walmart environment
   * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header
   * @param walmartRegion Walmart region
   * @param squareClientId Square (Weebly) Client ID
   * @param squareClientSecret Square (Weebly) Client Secret
   * @param squareRefreshToken Square (Weebly) Refresh Token
   * @param squarespaceApiKey Squarespace API Key
   * @param squarespaceClientId Squarespace Connector Client ID
   * @param squarespaceClientSecret Squarespace Connector Client Secret
   * @param squarespaceAccessToken Squarespace access token
   * @param squarespaceRefreshToken Squarespace refresh token
   * @param hybrisClientId Omni Commerce Connector Client ID
   * @param hybrisClientSecret Omni Commerce Connector Client Secret
   * @param hybrisUsername User Name
   * @param hybrisPassword User password
   * @param hybrisWebsites Websites to stores mapping data
   * @param lightspeedApiKey LightSpeed api key
   * @param lightspeedApiSecret LightSpeed api secret
   * @param commercehqApiKey CommerceHQ api key
   * @param commercehqApiPassword CommerceHQ api password
   * @param wcConsumerKey Woocommerce consumer key
   * @param wcConsumerSecret Woocommerce consumer secret
   * @param magentoConsumerKey Magento Consumer Key
   * @param magentoConsumerSecret Magento Consumer Secret
   * @param magentoAccessToken Magento Access Token
   * @param magentoTokenSecret Magento Token Secret
   * @param prestashopWebserviceKey Prestashop webservice key
   * @param wixAppId Wix App ID
   * @param wixAppSecretKey Wix App Secret Key
   * @param wixInstanceId Wix Instance ID
   * @param wixRefreshToken Wix refresh token
   * @param mercadoLibreAppId Mercado Libre App ID
   * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key
   * @param mercadoLibreRefreshToken Mercado Libre Refresh Token
   * @param zidClientId Zid Client ID
   * @param zidClientSecret Zid Client Secret
   * @param zidAccessToken Zid Access Token
   * @param zidAuthorization Zid Authorization
   * @param zidRefreshToken Zid refresh token
   * @param flipkartClientId Flipkart Client ID
   * @param flipkartClientSecret Flipkart Client Secret
   * @param allegroClientId Allegro Client ID
   * @param allegroClientSecret Allegro Client Secret
   * @param allegroAccessToken Allegro Access Token
   * @param allegroRefreshToken Allegro Refresh Token
   * @param allegroEnvironment Allegro Environment
   * @param zohoClientId Zoho Client ID
   * @param zohoClientSecret Zoho Client Secret
   * @param zohoRefreshToken Zoho Refresh Token
   * @param zohoRegion Zoho API endpoint Region
   * @param tiendanubeUserId Tiendanube User ID
   * @param tiendanubeAccessToken Tiendanube Access Token
   * @param tiendanubeClientSecret Tiendanube Client Secret
   * @param ottoClientId Otto Client ID
   * @param ottoClientSecret Otto Client Secret
   * @param ottoAppId Otto App ID
   * @param ottoRefreshToken Otto Refresh Token
   * @param ottoEnvironment Otto Environment
   * @param ottoAccessToken Otto Access Token
   * @param tiktokshopAppKey TikTok Shop App Key
   * @param tiktokshopAppSecret TikTok Shop App Secret
   * @param tiktokshopRefreshToken TikTok Shop Refresh Token
   * @param tiktokshopAccessToken TikTok Shop Access Token
   * @param sallaClientId Salla Client ID
   * @param sallaClientSecret Salla Client Secret
   * @param sallaRefreshToken Salla Refresh Token
   * @param sallaAccessToken Salla Access Token
   * @param temuAppKey Temu App Key
   * @param temuAppSecret Temu App Secret
   * @param temuAccessToken Temu Access Token
   * @param temuRegion Temu API endpoint Region.
   */
  def accountConfigUpdate(replaceParameters: Option[Boolean] = None, newStoreUrl: Option[String] = None, newStoreKey: Option[String] = None, bridgeUrl: Option[String] = None, storeRoot: Option[String] = None, dbTablesPrefix: Option[String] = None, userAgent: Option[String] = None, `3dcartPrivateKey`: Option[String] = None, `3dcartAccessToken`: Option[String] = None, `3dcartapiApiKey`: Option[String] = None, amazonSpClientId: Option[String] = None, amazonSpClientSecret: Option[String] = None, amazonSpRefreshToken: Option[String] = None, amazonSpAwsRegion: Option[String] = None, amazonSpApiEnvironment: Option[String] = None, amazonSellerId: Option[String] = None, aspdotnetstorefrontApiUser: Option[String] = None, aspdotnetstorefrontApiPass: Option[String] = None, bigcommerceapiAdminAccount: Option[String] = None, bigcommerceapiApiPath: Option[String] = None, bigcommerceapiApiKey: Option[String] = None, bigcommerceapiClientId: Option[String] = None, bigcommerceapiAccessToken: Option[String] = None, bigcommerceapiContext: Option[String] = None, bolApiKey: Option[String] = None, bolApiSecret: Option[String] = None, bolRetailerId: Option[Int] = None, demandwareClientId: Option[String] = None, demandwareApiPassword: Option[String] = None, demandwareUserName: Option[String] = None, demandwareUserPassword: Option[String] = None, ebayClientId: Option[String] = None, ebayClientSecret: Option[String] = None, ebayRuname: Option[String] = None, ebayAccessToken: Option[String] = None, ebayRefreshToken: Option[String] = None, ebayEnvironment: Option[String] = None, ebaySiteId: Option[Int] = None, ecwidAcessToken: Option[String] = None, ecwidStoreId: Option[String] = None, lazadaAppId: Option[String] = None, lazadaAppSecret: Option[String] = None, lazadaRefreshToken: Option[String] = None, lazadaRegion: Option[String] = None, etsyKeystring: Option[String] = None, etsySharedSecret: Option[String] = None, etsyAccessToken: Option[String] = None, etsyTokenSecret: Option[String] = None, etsyClientId: Option[String] = None, etsyRefreshToken: Option[String] = None, facebookAppId: Option[String] = None, facebookAppSecret: Option[String] = None, facebookAccessToken: Option[String] = None, facebookBusinessId: Option[String] = None, netoApiKey: Option[String] = None, netoApiUsername: Option[String] = None, shoplineAccessToken: Option[String] = None, shoplineAppKey: Option[String] = None, shoplineAppSecret: Option[String] = None, shoplineSharedSecret: Option[String] = None, shopifyAccessToken: Option[String] = None, shopifyApiKey: Option[String] = None, shopifyApiPassword: Option[String] = None, shopifySharedSecret: Option[String] = None, shopeePartnerId: Option[String] = None, shopeePartnerKey: Option[String] = None, shopeeShopId: Option[String] = None, shopeeRefreshToken: Option[String] = None, shopeeRegion: Option[String] = None, shopeeEnvironment: Option[String] = None, shoplazzaAccessToken: Option[String] = None, shoplazzaSharedSecret: Option[String] = None, mivaAccessToken: Option[String] = None, mivaSignature: Option[String] = None, shopwareAccessKey: Option[String] = None, shopwareApiKey: Option[String] = None, shopwareApiSecret: Option[String] = None, bigcartelUserName: Option[String] = None, bigcartelPassword: Option[String] = None, bricklinkConsumerKey: Option[String] = None, bricklinkConsumerSecret: Option[String] = None, bricklinkToken: Option[String] = None, bricklinkTokenSecret: Option[String] = None, volusionLogin: Option[String] = None, volusionPassword: Option[String] = None, walmartClientId: Option[String] = None, walmartClientSecret: Option[String] = None, walmartEnvironment: Option[String] = None, walmartChannelType: Option[String] = None, walmartRegion: Option[String] = None, squareClientId: Option[String] = None, squareClientSecret: Option[String] = None, squareRefreshToken: Option[String] = None, squarespaceApiKey: Option[String] = None, squarespaceClientId: Option[String] = None, squarespaceClientSecret: Option[String] = None, squarespaceAccessToken: Option[String] = None, squarespaceRefreshToken: Option[String] = None, hybrisClientId: Option[String] = None, hybrisClientSecret: Option[String] = None, hybrisUsername: Option[String] = None, hybrisPassword: Option[String] = None, hybrisWebsites: Seq[String], lightspeedApiKey: Option[String] = None, lightspeedApiSecret: Option[String] = None, commercehqApiKey: Option[String] = None, commercehqApiPassword: Option[String] = None, wcConsumerKey: Option[String] = None, wcConsumerSecret: Option[String] = None, magentoConsumerKey: Option[String] = None, magentoConsumerSecret: Option[String] = None, magentoAccessToken: Option[String] = None, magentoTokenSecret: Option[String] = None, prestashopWebserviceKey: Option[String] = None, wixAppId: Option[String] = None, wixAppSecretKey: Option[String] = None, wixInstanceId: Option[String] = None, wixRefreshToken: Option[String] = None, mercadoLibreAppId: Option[String] = None, mercadoLibreAppSecretKey: Option[String] = None, mercadoLibreRefreshToken: Option[String] = None, zidClientId: Option[Int] = None, zidClientSecret: Option[String] = None, zidAccessToken: Option[String] = None, zidAuthorization: Option[String] = None, zidRefreshToken: Option[String] = None, flipkartClientId: Option[String] = None, flipkartClientSecret: Option[String] = None, allegroClientId: Option[String] = None, allegroClientSecret: Option[String] = None, allegroAccessToken: Option[String] = None, allegroRefreshToken: Option[String] = None, allegroEnvironment: Option[String] = None, zohoClientId: Option[String] = None, zohoClientSecret: Option[String] = None, zohoRefreshToken: Option[String] = None, zohoRegion: Option[String] = None, tiendanubeUserId: Option[Int] = None, tiendanubeAccessToken: Option[String] = None, tiendanubeClientSecret: Option[String] = None, ottoClientId: Option[String] = None, ottoClientSecret: Option[String] = None, ottoAppId: Option[String] = None, ottoRefreshToken: Option[String] = None, ottoEnvironment: Option[String] = None, ottoAccessToken: Option[String] = None, tiktokshopAppKey: Option[String] = None, tiktokshopAppSecret: Option[String] = None, tiktokshopRefreshToken: Option[String] = None, tiktokshopAccessToken: Option[String] = None, sallaClientId: Option[String] = None, sallaClientSecret: Option[String] = None, sallaRefreshToken: Option[String] = None, sallaAccessToken: Option[String] = None, temuAppKey: Option[String] = None, temuAppSecret: Option[String] = None, temuAccessToken: Option[String] = None, temuRegion: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/account.config.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("replace_parameters", replaceParameters)
      .withQueryParam("new_store_url", newStoreUrl)
      .withQueryParam("new_store_key", newStoreKey)
      .withQueryParam("bridge_url", bridgeUrl)
      .withQueryParam("store_root", storeRoot)
      .withQueryParam("db_tables_prefix", dbTablesPrefix)
      .withQueryParam("user_agent", userAgent)
      .withQueryParam("3dcart_private_key", `3dcartPrivateKey`)
      .withQueryParam("3dcart_access_token", `3dcartAccessToken`)
      .withQueryParam("3dcartapi_api_key", `3dcartapiApiKey`)
      .withQueryParam("amazon_sp_client_id", amazonSpClientId)
      .withQueryParam("amazon_sp_client_secret", amazonSpClientSecret)
      .withQueryParam("amazon_sp_refresh_token", amazonSpRefreshToken)
      .withQueryParam("amazon_sp_aws_region", amazonSpAwsRegion)
      .withQueryParam("amazon_sp_api_environment", amazonSpApiEnvironment)
      .withQueryParam("amazon_seller_id", amazonSellerId)
      .withQueryParam("aspdotnetstorefront_api_user", aspdotnetstorefrontApiUser)
      .withQueryParam("aspdotnetstorefront_api_pass", aspdotnetstorefrontApiPass)
      .withQueryParam("bigcommerceapi_admin_account", bigcommerceapiAdminAccount)
      .withQueryParam("bigcommerceapi_api_path", bigcommerceapiApiPath)
      .withQueryParam("bigcommerceapi_api_key", bigcommerceapiApiKey)
      .withQueryParam("bigcommerceapi_client_id", bigcommerceapiClientId)
      .withQueryParam("bigcommerceapi_access_token", bigcommerceapiAccessToken)
      .withQueryParam("bigcommerceapi_context", bigcommerceapiContext)
      .withQueryParam("bol_api_key", bolApiKey)
      .withQueryParam("bol_api_secret", bolApiSecret)
      .withQueryParam("bol_retailer_id", bolRetailerId)
      .withQueryParam("demandware_client_id", demandwareClientId)
      .withQueryParam("demandware_api_password", demandwareApiPassword)
      .withQueryParam("demandware_user_name", demandwareUserName)
      .withQueryParam("demandware_user_password", demandwareUserPassword)
      .withQueryParam("ebay_client_id", ebayClientId)
      .withQueryParam("ebay_client_secret", ebayClientSecret)
      .withQueryParam("ebay_runame", ebayRuname)
      .withQueryParam("ebay_access_token", ebayAccessToken)
      .withQueryParam("ebay_refresh_token", ebayRefreshToken)
      .withQueryParam("ebay_environment", ebayEnvironment)
      .withQueryParam("ebay_site_id", ebaySiteId)
      .withQueryParam("ecwid_acess_token", ecwidAcessToken)
      .withQueryParam("ecwid_store_id", ecwidStoreId)
      .withQueryParam("lazada_app_id", lazadaAppId)
      .withQueryParam("lazada_app_secret", lazadaAppSecret)
      .withQueryParam("lazada_refresh_token", lazadaRefreshToken)
      .withQueryParam("lazada_region", lazadaRegion)
      .withQueryParam("etsy_keystring", etsyKeystring)
      .withQueryParam("etsy_shared_secret", etsySharedSecret)
      .withQueryParam("etsy_access_token", etsyAccessToken)
      .withQueryParam("etsy_token_secret", etsyTokenSecret)
      .withQueryParam("etsy_client_id", etsyClientId)
      .withQueryParam("etsy_refresh_token", etsyRefreshToken)
      .withQueryParam("facebook_app_id", facebookAppId)
      .withQueryParam("facebook_app_secret", facebookAppSecret)
      .withQueryParam("facebook_access_token", facebookAccessToken)
      .withQueryParam("facebook_business_id", facebookBusinessId)
      .withQueryParam("neto_api_key", netoApiKey)
      .withQueryParam("neto_api_username", netoApiUsername)
      .withQueryParam("shopline_access_token", shoplineAccessToken)
      .withQueryParam("shopline_app_key", shoplineAppKey)
      .withQueryParam("shopline_app_secret", shoplineAppSecret)
      .withQueryParam("shopline_shared_secret", shoplineSharedSecret)
      .withQueryParam("shopify_access_token", shopifyAccessToken)
      .withQueryParam("shopify_api_key", shopifyApiKey)
      .withQueryParam("shopify_api_password", shopifyApiPassword)
      .withQueryParam("shopify_shared_secret", shopifySharedSecret)
      .withQueryParam("shopee_partner_id", shopeePartnerId)
      .withQueryParam("shopee_partner_key", shopeePartnerKey)
      .withQueryParam("shopee_shop_id", shopeeShopId)
      .withQueryParam("shopee_refresh_token", shopeeRefreshToken)
      .withQueryParam("shopee_region", shopeeRegion)
      .withQueryParam("shopee_environment", shopeeEnvironment)
      .withQueryParam("shoplazza_access_token", shoplazzaAccessToken)
      .withQueryParam("shoplazza_shared_secret", shoplazzaSharedSecret)
      .withQueryParam("miva_access_token", mivaAccessToken)
      .withQueryParam("miva_signature", mivaSignature)
      .withQueryParam("shopware_access_key", shopwareAccessKey)
      .withQueryParam("shopware_api_key", shopwareApiKey)
      .withQueryParam("shopware_api_secret", shopwareApiSecret)
      .withQueryParam("bigcartel_user_name", bigcartelUserName)
      .withQueryParam("bigcartel_password", bigcartelPassword)
      .withQueryParam("bricklink_consumer_key", bricklinkConsumerKey)
      .withQueryParam("bricklink_consumer_secret", bricklinkConsumerSecret)
      .withQueryParam("bricklink_token", bricklinkToken)
      .withQueryParam("bricklink_token_secret", bricklinkTokenSecret)
      .withQueryParam("volusion_login", volusionLogin)
      .withQueryParam("volusion_password", volusionPassword)
      .withQueryParam("walmart_client_id", walmartClientId)
      .withQueryParam("walmart_client_secret", walmartClientSecret)
      .withQueryParam("walmart_environment", walmartEnvironment)
      .withQueryParam("walmart_channel_type", walmartChannelType)
      .withQueryParam("walmart_region", walmartRegion)
      .withQueryParam("square_client_id", squareClientId)
      .withQueryParam("square_client_secret", squareClientSecret)
      .withQueryParam("square_refresh_token", squareRefreshToken)
      .withQueryParam("squarespace_api_key", squarespaceApiKey)
      .withQueryParam("squarespace_client_id", squarespaceClientId)
      .withQueryParam("squarespace_client_secret", squarespaceClientSecret)
      .withQueryParam("squarespace_access_token", squarespaceAccessToken)
      .withQueryParam("squarespace_refresh_token", squarespaceRefreshToken)
      .withQueryParam("hybris_client_id", hybrisClientId)
      .withQueryParam("hybris_client_secret", hybrisClientSecret)
      .withQueryParam("hybris_username", hybrisUsername)
      .withQueryParam("hybris_password", hybrisPassword)
      .withQueryParam("hybris_websites", ArrayValues(hybrisWebsites, MULTI))
      .withQueryParam("lightspeed_api_key", lightspeedApiKey)
      .withQueryParam("lightspeed_api_secret", lightspeedApiSecret)
      .withQueryParam("commercehq_api_key", commercehqApiKey)
      .withQueryParam("commercehq_api_password", commercehqApiPassword)
      .withQueryParam("wc_consumer_key", wcConsumerKey)
      .withQueryParam("wc_consumer_secret", wcConsumerSecret)
      .withQueryParam("magento_consumer_key", magentoConsumerKey)
      .withQueryParam("magento_consumer_secret", magentoConsumerSecret)
      .withQueryParam("magento_access_token", magentoAccessToken)
      .withQueryParam("magento_token_secret", magentoTokenSecret)
      .withQueryParam("prestashop_webservice_key", prestashopWebserviceKey)
      .withQueryParam("wix_app_id", wixAppId)
      .withQueryParam("wix_app_secret_key", wixAppSecretKey)
      .withQueryParam("wix_instance_id", wixInstanceId)
      .withQueryParam("wix_refresh_token", wixRefreshToken)
      .withQueryParam("mercado_libre_app_id", mercadoLibreAppId)
      .withQueryParam("mercado_libre_app_secret_key", mercadoLibreAppSecretKey)
      .withQueryParam("mercado_libre_refresh_token", mercadoLibreRefreshToken)
      .withQueryParam("zid_client_id", zidClientId)
      .withQueryParam("zid_client_secret", zidClientSecret)
      .withQueryParam("zid_access_token", zidAccessToken)
      .withQueryParam("zid_authorization", zidAuthorization)
      .withQueryParam("zid_refresh_token", zidRefreshToken)
      .withQueryParam("flipkart_client_id", flipkartClientId)
      .withQueryParam("flipkart_client_secret", flipkartClientSecret)
      .withQueryParam("allegro_client_id", allegroClientId)
      .withQueryParam("allegro_client_secret", allegroClientSecret)
      .withQueryParam("allegro_access_token", allegroAccessToken)
      .withQueryParam("allegro_refresh_token", allegroRefreshToken)
      .withQueryParam("allegro_environment", allegroEnvironment)
      .withQueryParam("zoho_client_id", zohoClientId)
      .withQueryParam("zoho_client_secret", zohoClientSecret)
      .withQueryParam("zoho_refresh_token", zohoRefreshToken)
      .withQueryParam("zoho_region", zohoRegion)
      .withQueryParam("tiendanube_user_id", tiendanubeUserId)
      .withQueryParam("tiendanube_access_token", tiendanubeAccessToken)
      .withQueryParam("tiendanube_client_secret", tiendanubeClientSecret)
      .withQueryParam("otto_client_id", ottoClientId)
      .withQueryParam("otto_client_secret", ottoClientSecret)
      .withQueryParam("otto_app_id", ottoAppId)
      .withQueryParam("otto_refresh_token", ottoRefreshToken)
      .withQueryParam("otto_environment", ottoEnvironment)
      .withQueryParam("otto_access_token", ottoAccessToken)
      .withQueryParam("tiktokshop_app_key", tiktokshopAppKey)
      .withQueryParam("tiktokshop_app_secret", tiktokshopAppSecret)
      .withQueryParam("tiktokshop_refresh_token", tiktokshopRefreshToken)
      .withQueryParam("tiktokshop_access_token", tiktokshopAccessToken)
      .withQueryParam("salla_client_id", sallaClientId)
      .withQueryParam("salla_client_secret", sallaClientSecret)
      .withQueryParam("salla_refresh_token", sallaRefreshToken)
      .withQueryParam("salla_access_token", sallaAccessToken)
      .withQueryParam("temu_app_key", temuAppKey)
      .withQueryParam("temu_app_secret", temuAppSecret)
      .withQueryParam("temu_access_token", temuAccessToken)
      .withQueryParam("temu_region", temuRegion)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
   * 
   * Expected answers:
   *   code 200 : AccountFailedWebhooks200Response (successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param ids List of сomma-separated webhook ids
   */
  def accountFailedWebhooks(start: Option[Int] = None, count: Option[Int] = None, ids: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[AccountFailedWebhooks200Response] =
    ApiRequest[AccountFailedWebhooks200Response](ApiMethods.GET, baseUrl, "/account.failed_webhooks.json", "application/json")
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("ids", ids)
      .withSuccessResponse[AccountFailedWebhooks200Response](200)
      

  /**
   * Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
   * 
   * Expected answers:
   *   code 200 : AccountSupportedPlatforms200Response (successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   */
  def accountSupportedPlatforms()(implicit apiKey: ApiKeyValue): ApiRequest[AccountSupportedPlatforms200Response] =
    ApiRequest[AccountSupportedPlatforms200Response](ApiMethods.GET, baseUrl, "/account.supported_platforms.json", "application/json")
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[AccountSupportedPlatforms200Response](200)
      



}

