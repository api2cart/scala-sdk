/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AccountConfigUpdate200Response
import org.openapitools.client.model.AttributeValueDelete200Response
import org.openapitools.client.model.CategoryAddBatch200Response
import org.openapitools.client.model.ModelResponseOrderAbandonedList
import org.openapitools.client.model.ModelResponseOrderList
import org.openapitools.client.model.ModelResponseOrderPreestimateShippingList
import org.openapitools.client.model.ModelResponseOrderShipmentList
import org.openapitools.client.model.ModelResponseOrderStatusList
import org.openapitools.client.model.ModelResponseOrderTransactionList
import org.openapitools.client.model.OrderAdd
import org.openapitools.client.model.OrderAdd200Response
import org.openapitools.client.model.OrderCount200Response
import org.openapitools.client.model.OrderFinancialStatusList200Response
import org.openapitools.client.model.OrderFind200Response
import org.openapitools.client.model.OrderFulfillmentStatusList200Response
import org.openapitools.client.model.OrderInfo200Response
import org.openapitools.client.model.OrderPreestimateShippingList
import org.openapitools.client.model.OrderRefundAdd
import org.openapitools.client.model.OrderRefundAdd200Response
import org.openapitools.client.model.OrderReturnAdd
import org.openapitools.client.model.OrderReturnAdd200Response
import org.openapitools.client.model.OrderReturnUpdate
import org.openapitools.client.model.OrderShipmentAdd
import org.openapitools.client.model.OrderShipmentAdd200Response
import org.openapitools.client.model.OrderShipmentAddBatch
import org.openapitools.client.model.OrderShipmentDelete200Response
import org.openapitools.client.model.OrderShipmentInfo200Response
import org.openapitools.client.model.OrderShipmentTrackingAdd
import org.openapitools.client.model.OrderShipmentTrackingAdd200Response
import org.openapitools.client.model.OrderShipmentUpdate
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object OrderApi {

  def apply(baseUrl: String = "https://api.api2cart.com/v1.1") = new OrderApi(baseUrl)
}

class OrderApi(baseUrl: String) {

  /**
   * Get list of orders that were left by customers before completing the order.
   * 
   * Expected answers:
   *   code 200 : ModelResponseOrderAbandonedList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param customerId Retrieves orders specified by customer id
   * @param customerEmail Retrieves orders specified by customer email
   * @param storeId Store Id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param skipEmptyEmail Filter empty emails
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def orderAbandonedList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, customerId: Option[String] = None, customerEmail: Option[String] = None, storeId: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, skipEmptyEmail: Option[Boolean] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseOrderAbandonedList] =
    ApiRequest[ModelResponseOrderAbandonedList](ApiMethods.GET, baseUrl, "/order.abandoned.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("customer_email", customerEmail)
      .withQueryParam("store_id", storeId)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("skip_empty_email", skipEmptyEmail)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseOrderAbandonedList](200)
      

  /**
   * Add a new order to the cart.
   * 
   * Expected answers:
   *   code 200 : OrderAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderAdd 
   */
  def orderAdd(orderAdd: OrderAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderAdd200Response] =
    ApiRequest[OrderAdd200Response](ApiMethods.POST, baseUrl, "/order.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderAdd)
      .withSuccessResponse[OrderAdd200Response](200)
      

  /**
   * Count orders in store
   * 
   * Expected answers:
   *   code 200 : OrderCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderIds Counts orders specified by order ids
   * @param ids Counts orders specified by ids
   * @param customerId Counts orders quantity specified by customer id
   * @param storeId Counts orders quantity specified by store id
   * @param customerEmail Counts orders quantity specified by customer email
   * @param orderStatus Counts orders quantity specified by order status
   * @param orderStatusIds Retrieves orders specified by order statuses
   * @param ebayOrderStatus Counts orders quantity specified by order status
   * @param financialStatus Counts orders quantity specified by financial status
   * @param financialStatusIds Retrieves orders count specified by financial status ids
   * @param fulfillmentChannel Retrieves order with a fulfillment channel
   * @param fulfillmentStatus Create order with fulfillment status
   * @param shippingMethod Retrieve entities according to shipping method
   * @param deliveryMethod Retrieves order with delivery method
   * @param tags Order tags
   * @param shipNodeType Retrieves order with ship node type
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   */
  def orderCount(orderIds: Option[String] = None, ids: Option[String] = None, customerId: Option[String] = None, storeId: Option[String] = None, customerEmail: Option[String] = None, orderStatus: Option[String] = None, orderStatusIds: Seq[String], ebayOrderStatus: Option[String] = None, financialStatus: Option[String] = None, financialStatusIds: Seq[String], fulfillmentChannel: Option[String] = None, fulfillmentStatus: Option[String] = None, shippingMethod: Option[String] = None, deliveryMethod: Option[String] = None, tags: Option[String] = None, shipNodeType: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderCount200Response] =
    ApiRequest[OrderCount200Response](ApiMethods.GET, baseUrl, "/order.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("order_ids", orderIds)
      .withQueryParam("ids", ids)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("customer_email", customerEmail)
      .withQueryParam("order_status", orderStatus)
      .withQueryParam("order_status_ids", ArrayValues(orderStatusIds, MULTI))
      .withQueryParam("ebay_order_status", ebayOrderStatus)
      .withQueryParam("financial_status", financialStatus)
      .withQueryParam("financial_status_ids", ArrayValues(financialStatusIds, MULTI))
      .withQueryParam("fulfillment_channel", fulfillmentChannel)
      .withQueryParam("fulfillment_status", fulfillmentStatus)
      .withQueryParam("shipping_method", shippingMethod)
      .withQueryParam("delivery_method", deliveryMethod)
      .withQueryParam("tags", tags)
      .withQueryParam("ship_node_type", shipNodeType)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withSuccessResponse[OrderCount200Response](200)
      

  /**
   * Retrieve list of financial statuses
   * 
   * Expected answers:
   *   code 200 : OrderFinancialStatusList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def orderFinancialStatusList()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderFinancialStatusList200Response] =
    ApiRequest[OrderFinancialStatusList200Response](ApiMethods.GET, baseUrl, "/order.financial_status.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[OrderFinancialStatusList200Response](200)
      

  /**
   * This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.
   * 
   * Expected answers:
   *   code 200 : OrderFind200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param customerId Retrieves orders specified by customer id
   * @param customerEmail Retrieves orders specified by customer email
   * @param orderStatus Retrieves orders specified by order status
   * @param financialStatus Retrieves orders specified by financial status
   * @param createdTo Retrieve entities to their creation date
   * @param createdFrom Retrieve entities from their creation date
   * @param modifiedTo Retrieve entities to their modification date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def orderFind(start: Option[Int] = None, count: Option[Int] = None, customerId: Option[String] = None, customerEmail: Option[String] = None, orderStatus: Option[String] = None, financialStatus: Option[String] = None, createdTo: Option[String] = None, createdFrom: Option[String] = None, modifiedTo: Option[String] = None, modifiedFrom: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderFind200Response] =
    ApiRequest[OrderFind200Response](ApiMethods.GET, baseUrl, "/order.find.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("customer_email", customerEmail)
      .withQueryParam("order_status", orderStatus)
      .withQueryParam("financial_status", financialStatus)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[OrderFind200Response](200)
      

  /**
   * Retrieve list of fulfillment statuses
   * 
   * Expected answers:
   *   code 200 : OrderFulfillmentStatusList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param action Available statuses for the specified action.
   */
  def orderFulfillmentStatusList(action: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderFulfillmentStatusList200Response] =
    ApiRequest[OrderFulfillmentStatusList200Response](ApiMethods.GET, baseUrl, "/order.fulfillment_status.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("action", action)
      .withSuccessResponse[OrderFulfillmentStatusList200Response](200)
      

  /**
   * Info about a specific order by ID
   * 
   * Expected answers:
   *   code 200 : OrderInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Retrieves order info specified by id
   * @param orderId Retrieves order’s info specified by order id
   * @param storeId Defines store id where the order should be found
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param enableCache If the value is 'true' and order exist in our cache, we will return order.info response from cache
   * @param useLatestApiVersion Use the latest platform API version
   */
  def orderInfo(id: Option[String] = None, orderId: Option[String] = None, storeId: Option[String] = None, params: Option[String] = None, responseFields: Option[String] = None, exclude: Option[String] = None, enableCache: Option[Boolean] = None, useLatestApiVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderInfo200Response] =
    ApiRequest[OrderInfo200Response](ApiMethods.GET, baseUrl, "/order.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("order_id", orderId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("params", params)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("exclude", exclude)
      .withQueryParam("enable_cache", enableCache)
      .withQueryParam("use_latest_api_version", useLatestApiVersion)
      .withSuccessResponse[OrderInfo200Response](200)
      

  /**
   * Get list of orders from store.
   * 
   * Expected answers:
   *   code 200 : ModelResponseOrderList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param ids Retrieves orders specified by ids
   * @param orderIds Retrieves orders specified by order ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param storeId Store Id
   * @param customerId Retrieves orders specified by customer id
   * @param customerEmail Retrieves orders specified by customer email
   * @param basketId Retrieves order’s info specified by basket id.
   * @param currencyId Currency Id
   * @param phone Filter orders by customer's phone number
   * @param orderStatus Retrieves orders specified by order status
   * @param orderStatusIds Retrieves orders specified by order statuses
   * @param ebayOrderStatus Retrieves orders specified by order status
   * @param financialStatus Retrieves orders specified by financial status
   * @param financialStatusIds Retrieves orders specified by financial status ids
   * @param fulfillmentStatus Create order with fulfillment status
   * @param returnStatus Retrieves orders specified by return status
   * @param fulfillmentChannel Retrieves order with a fulfillment channel
   * @param shippingMethod Retrieve entities according to shipping method
   * @param skipOrderIds Skipped orders by ids
   * @param isDeleted Filter deleted orders
   * @param shippingCountryIso3 Retrieve entities according to shipping country
   * @param deliveryMethod Retrieves order with delivery method
   * @param shipNodeType Retrieves order with ship node type
   * @param createdTo Retrieve entities to their creation date
   * @param createdFrom Retrieve entities from their creation date
   * @param modifiedTo Retrieve entities to their modification date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param tags Order tags
   * @param sortBy Set field to sort by
   * @param sortDirection Set sorting direction
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param enableCache If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
   * @param useLatestApiVersion Use the latest platform API version
   */
  def orderList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, ids: Option[String] = None, orderIds: Option[String] = None, sinceId: Option[String] = None, storeId: Option[String] = None, customerId: Option[String] = None, customerEmail: Option[String] = None, basketId: Option[String] = None, currencyId: Option[String] = None, phone: Option[String] = None, orderStatus: Option[String] = None, orderStatusIds: Seq[String], ebayOrderStatus: Option[String] = None, financialStatus: Option[String] = None, financialStatusIds: Seq[String], fulfillmentStatus: Option[String] = None, returnStatus: Option[String] = None, fulfillmentChannel: Option[String] = None, shippingMethod: Option[String] = None, skipOrderIds: Option[String] = None, isDeleted: Option[Boolean] = None, shippingCountryIso3: Option[String] = None, deliveryMethod: Option[String] = None, shipNodeType: Option[String] = None, createdTo: Option[String] = None, createdFrom: Option[String] = None, modifiedTo: Option[String] = None, modifiedFrom: Option[String] = None, tags: Option[String] = None, sortBy: Option[String] = None, sortDirection: Option[String] = None, params: Option[String] = None, responseFields: Option[String] = None, exclude: Option[String] = None, enableCache: Option[Boolean] = None, useLatestApiVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseOrderList] =
    ApiRequest[ModelResponseOrderList](ApiMethods.GET, baseUrl, "/order.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("ids", ids)
      .withQueryParam("order_ids", orderIds)
      .withQueryParam("since_id", sinceId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("customer_email", customerEmail)
      .withQueryParam("basket_id", basketId)
      .withQueryParam("currency_id", currencyId)
      .withQueryParam("phone", phone)
      .withQueryParam("order_status", orderStatus)
      .withQueryParam("order_status_ids", ArrayValues(orderStatusIds, MULTI))
      .withQueryParam("ebay_order_status", ebayOrderStatus)
      .withQueryParam("financial_status", financialStatus)
      .withQueryParam("financial_status_ids", ArrayValues(financialStatusIds, MULTI))
      .withQueryParam("fulfillment_status", fulfillmentStatus)
      .withQueryParam("return_status", returnStatus)
      .withQueryParam("fulfillment_channel", fulfillmentChannel)
      .withQueryParam("shipping_method", shippingMethod)
      .withQueryParam("skip_order_ids", skipOrderIds)
      .withQueryParam("is_deleted", isDeleted)
      .withQueryParam("shipping_country_iso3", shippingCountryIso3)
      .withQueryParam("delivery_method", deliveryMethod)
      .withQueryParam("ship_node_type", shipNodeType)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("tags", tags)
      .withQueryParam("sort_by", sortBy)
      .withQueryParam("sort_direction", sortDirection)
      .withQueryParam("params", params)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("exclude", exclude)
      .withQueryParam("enable_cache", enableCache)
      .withQueryParam("use_latest_api_version", useLatestApiVersion)
      .withSuccessResponse[ModelResponseOrderList](200)
      

  /**
   * Retrieve list of order preestimated shipping methods
   * 
   * Expected answers:
   *   code 200 : ModelResponseOrderPreestimateShippingList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderPreestimateShippingList 
   */
  def orderPreestimateShippingList(orderPreestimateShippingList: OrderPreestimateShippingList)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseOrderPreestimateShippingList] =
    ApiRequest[ModelResponseOrderPreestimateShippingList](ApiMethods.POST, baseUrl, "/order.preestimate_shipping.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderPreestimateShippingList)
      .withSuccessResponse[ModelResponseOrderPreestimateShippingList](200)
      

  /**
   * Add a refund to the order.
   * 
   * Expected answers:
   *   code 200 : OrderRefundAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderRefundAdd 
   */
  def orderRefundAdd(orderRefundAdd: OrderRefundAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderRefundAdd200Response] =
    ApiRequest[OrderRefundAdd200Response](ApiMethods.POST, baseUrl, "/order.refund.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderRefundAdd)
      .withSuccessResponse[OrderRefundAdd200Response](200)
      

  /**
   * Create new return request.
   * 
   * Expected answers:
   *   code 200 : OrderReturnAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderReturnAdd 
   */
  def orderReturnAdd(orderReturnAdd: OrderReturnAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderReturnAdd200Response] =
    ApiRequest[OrderReturnAdd200Response](ApiMethods.POST, baseUrl, "/order.return.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderReturnAdd)
      .withSuccessResponse[OrderReturnAdd200Response](200)
      

  /**
   * Delete return.
   * 
   * Expected answers:
   *   code 200 : AttributeValueDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param returnId Return ID
   * @param orderId Defines the order id
   * @param storeId Store Id
   */
  def orderReturnDelete(returnId: String, orderId: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeValueDelete200Response] =
    ApiRequest[AttributeValueDelete200Response](ApiMethods.DELETE, baseUrl, "/order.return.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("return_id", returnId)
      .withQueryParam("order_id", orderId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeValueDelete200Response](200)
      

  /**
   * Update order's shipment information.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderReturnUpdate 
   */
  def orderReturnUpdate(orderReturnUpdate: OrderReturnUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/order.return.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderReturnUpdate)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Add a shipment to the order.
   * 
   * Expected answers:
   *   code 200 : OrderShipmentAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderShipmentAdd 
   */
  def orderShipmentAdd(orderShipmentAdd: OrderShipmentAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderShipmentAdd200Response] =
    ApiRequest[OrderShipmentAdd200Response](ApiMethods.POST, baseUrl, "/order.shipment.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderShipmentAdd)
      .withSuccessResponse[OrderShipmentAdd200Response](200)
      

  /**
   * Add a shipments to the orders.
   * 
   * Expected answers:
   *   code 200 : CategoryAddBatch200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderShipmentAddBatch 
   */
  def orderShipmentAddBatch(orderShipmentAddBatch: OrderShipmentAddBatch)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CategoryAddBatch200Response] =
    ApiRequest[CategoryAddBatch200Response](ApiMethods.POST, baseUrl, "/order.shipment.add.batch.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderShipmentAddBatch)
      .withSuccessResponse[CategoryAddBatch200Response](200)
      

  /**
   * Delete order's shipment.
   * 
   * Expected answers:
   *   code 200 : OrderShipmentDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param shipmentId Shipment id indicates the number of delivery
   * @param orderId Defines the order for which the shipment will be deleted
   * @param storeId Store Id
   */
  def orderShipmentDelete(shipmentId: String, orderId: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderShipmentDelete200Response] =
    ApiRequest[OrderShipmentDelete200Response](ApiMethods.DELETE, baseUrl, "/order.shipment.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("shipment_id", shipmentId)
      .withQueryParam("order_id", orderId)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[OrderShipmentDelete200Response](200)
      

  /**
   * Get information of shipment.
   * 
   * Expected answers:
   *   code 200 : OrderShipmentInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param orderId Defines the order id
   * @param start This parameter sets the number from which you want to get entities
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def orderShipmentInfo(id: String, orderId: String, start: Option[Int] = None, storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderShipmentInfo200Response] =
    ApiRequest[OrderShipmentInfo200Response](ApiMethods.GET, baseUrl, "/order.shipment.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("id", id)
      .withQueryParam("order_id", orderId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[OrderShipmentInfo200Response](200)
      

  /**
   * Get list of shipments by orders.
   * 
   * Expected answers:
   *   code 200 : ModelResponseOrderShipmentList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderId Retrieves shipments specified by order id
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param storeId Store Id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def orderShipmentList(orderId: String, start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, storeId: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseOrderShipmentList] =
    ApiRequest[ModelResponseOrderShipmentList](ApiMethods.GET, baseUrl, "/order.shipment.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("order_id", orderId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseOrderShipmentList](200)
      

  /**
   * Add order shipment's tracking info.
   * 
   * Expected answers:
   *   code 200 : OrderShipmentTrackingAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderShipmentTrackingAdd 
   */
  def orderShipmentTrackingAdd(orderShipmentTrackingAdd: OrderShipmentTrackingAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[OrderShipmentTrackingAdd200Response] =
    ApiRequest[OrderShipmentTrackingAdd200Response](ApiMethods.POST, baseUrl, "/order.shipment.tracking.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderShipmentTrackingAdd)
      .withSuccessResponse[OrderShipmentTrackingAdd200Response](200)
      

  /**
   * Update order's shipment information.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderShipmentUpdate 
   */
  def orderShipmentUpdate(orderShipmentUpdate: OrderShipmentUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/order.shipment.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(orderShipmentUpdate)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      

  /**
   * Retrieve list of statuses
   * 
   * Expected answers:
   *   code 200 : ModelResponseOrderStatusList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param storeId Store Id
   * @param action Available statuses for the specified action.
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   */
  def orderStatusList(storeId: Option[String] = None, action: Option[String] = None, responseFields: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseOrderStatusList] =
    ApiRequest[ModelResponseOrderStatusList](ApiMethods.GET, baseUrl, "/order.status.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("store_id", storeId)
      .withQueryParam("action", action)
      .withQueryParam("response_fields", responseFields)
      .withSuccessResponse[ModelResponseOrderStatusList](200)
      

  /**
   * Retrieve list of order transaction
   * 
   * Expected answers:
   *   code 200 : ModelResponseOrderTransactionList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderIds Retrieves order transactions specified by order ids
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param storeId Store Id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def orderTransactionList(orderIds: String, count: Option[Int] = None, pageCursor: Option[String] = None, storeId: Option[String] = None, params: Option[String] = None, responseFields: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseOrderTransactionList] =
    ApiRequest[ModelResponseOrderTransactionList](ApiMethods.GET, baseUrl, "/order.transaction.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("order_ids", orderIds)
      .withQueryParam("store_id", storeId)
      .withQueryParam("params", params)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseOrderTransactionList](200)
      

  /**
   * Update existing order.
   * 
   * Expected answers:
   *   code 200 : AccountConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderId Defines the orders specified by order id
   * @param storeId Defines store id where the order should be found
   * @param orderStatus Defines new order's status
   * @param financialStatus Update order financial status to specified
   * @param fulfillmentStatus Create order with fulfillment status
   * @param cancellationReason Defines the cancellation reason when the order will be canceled
   * @param orderPaymentMethod Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
   * @param comment Specifies order comment
   * @param adminComment Specifies admin's order comment
   * @param adminPrivateComment Specifies private admin's order comment
   * @param invoiceAdminComment Specifies admin's order invoice comment
   * @param dateModified Specifies order's  modification date
   * @param dateFinished Specifies order's  finished date
   * @param sendNotifications Send notifications to customer after order was created
   * @param createInvoice Determines whether an invoice should be created if it has not already been created
   * @param origin The source of the order
   */
  def orderUpdate(orderId: String, storeId: Option[String] = None, orderStatus: Option[String] = None, financialStatus: Option[String] = None, fulfillmentStatus: Option[String] = None, cancellationReason: Option[String] = None, orderPaymentMethod: Option[String] = None, comment: Option[String] = None, adminComment: Option[String] = None, adminPrivateComment: Option[String] = None, invoiceAdminComment: Option[String] = None, dateModified: Option[String] = None, dateFinished: Option[String] = None, sendNotifications: Option[Boolean] = None, createInvoice: Option[Boolean] = None, origin: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AccountConfigUpdate200Response] =
    ApiRequest[AccountConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/order.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("order_id", orderId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("order_status", orderStatus)
      .withQueryParam("financial_status", financialStatus)
      .withQueryParam("fulfillment_status", fulfillmentStatus)
      .withQueryParam("cancellation_reason", cancellationReason)
      .withQueryParam("order_payment_method", orderPaymentMethod)
      .withQueryParam("comment", comment)
      .withQueryParam("admin_comment", adminComment)
      .withQueryParam("admin_private_comment", adminPrivateComment)
      .withQueryParam("invoice_admin_comment", invoiceAdminComment)
      .withQueryParam("date_modified", dateModified)
      .withQueryParam("date_finished", dateFinished)
      .withQueryParam("send_notifications", sendNotifications)
      .withQueryParam("create_invoice", createInvoice)
      .withQueryParam("origin", origin)
      .withSuccessResponse[AccountConfigUpdate200Response](200)
      



}

