/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ModelResponseReturnList
import org.openapitools.client.model.ReturnActionList200Response
import org.openapitools.client.model.ReturnCount200Response
import org.openapitools.client.model.ReturnInfo200Response
import org.openapitools.client.model.ReturnReasonList200Response
import org.openapitools.client.model.ReturnStatusList200Response
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ReturnApi {

  def apply(baseUrl: String = "https://api.api2cart.local.com/v1.1") = new ReturnApi(baseUrl)
}

class ReturnApi(baseUrl: String) {

  /**
   * Retrieve list of return actions
   * 
   * Expected answers:
   *   code 200 : ReturnActionList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def returnActionList()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ReturnActionList200Response] =
    ApiRequest[ReturnActionList200Response](ApiMethods.GET, baseUrl, "/return.action.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[ReturnActionList200Response](200)
      

  /**
   * Count returns in store
   * 
   * Expected answers:
   *   code 200 : ReturnCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param orderIds Counts return requests specified by order ids
   * @param customerId Counts return requests quantity specified by customer id
   * @param storeId Store Id
   * @param status Defines status
   * @param returnType Retrieves returns specified by return type
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   */
  def returnCount(orderIds: Option[String] = None, customerId: Option[String] = None, storeId: Option[String] = None, status: Option[String] = None, returnType: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, reportRequestId: Option[String] = None, disableReportCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ReturnCount200Response] =
    ApiRequest[ReturnCount200Response](ApiMethods.GET, baseUrl, "/return.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("order_ids", orderIds)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("status", status)
      .withQueryParam("return_type", returnType)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("report_request_id", reportRequestId)
      .withQueryParam("disable_report_cache", disableReportCache)
      .withSuccessResponse[ReturnCount200Response](200)
      

  /**
   * Retrieve return information.
   * 
   * Expected answers:
   *   code 200 : ReturnInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param orderId Defines the order id
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def returnInfo(id: String, orderId: Option[String] = None, storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ReturnInfo200Response] =
    ApiRequest[ReturnInfo200Response](ApiMethods.GET, baseUrl, "/return.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("order_id", orderId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ReturnInfo200Response](200)
      

  /**
   * Get list of return requests from store.
   * 
   * Expected answers:
   *   code 200 : ModelResponseReturnList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param orderId Defines the order id
   * @param orderIds Retrieves return requests specified by order ids
   * @param customerId Retrieves return requests specified by customer id
   * @param storeId Store Id
   * @param status Defines status
   * @param returnType Retrieves returns specified by return type
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   */
  def returnList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, orderId: Option[String] = None, orderIds: Option[String] = None, customerId: Option[String] = None, storeId: Option[String] = None, status: Option[String] = None, returnType: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None, reportRequestId: Option[String] = None, disableReportCache: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseReturnList] =
    ApiRequest[ModelResponseReturnList](ApiMethods.GET, baseUrl, "/return.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("order_id", orderId)
      .withQueryParam("order_ids", orderIds)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("store_id", storeId)
      .withQueryParam("status", status)
      .withQueryParam("return_type", returnType)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withQueryParam("report_request_id", reportRequestId)
      .withQueryParam("disable_report_cache", disableReportCache)
      .withSuccessResponse[ModelResponseReturnList](200)
      

  /**
   * Retrieve list of return reasons
   * 
   * Expected answers:
   *   code 200 : ReturnReasonList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param storeId Store Id
   */
  def returnReasonList(storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ReturnReasonList200Response] =
    ApiRequest[ReturnReasonList200Response](ApiMethods.GET, baseUrl, "/return.reason.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[ReturnReasonList200Response](200)
      

  /**
   * Retrieve list of statuses
   * 
   * Expected answers:
   *   code 200 : ReturnStatusList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def returnStatusList()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ReturnStatusList200Response] =
    ApiRequest[ReturnStatusList200Response](ApiMethods.GET, baseUrl, "/return.status.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[ReturnStatusList200Response](200)
      



}

