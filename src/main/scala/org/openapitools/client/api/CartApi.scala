/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AccountCartAdd200Response
import org.openapitools.client.model.AttributeAdd200Response
import org.openapitools.client.model.AttributeDelete200Response
import org.openapitools.client.model.BasketLiveShippingServiceDelete200Response
import java.math.BigDecimal
import org.openapitools.client.model.CartBridge200Response
import org.openapitools.client.model.CartCatalogPriceRulesCount200Response
import org.openapitools.client.model.CartClearCache200Response
import org.openapitools.client.model.CartConfig200Response
import org.openapitools.client.model.CartConfigUpdate
import org.openapitools.client.model.CartConfigUpdate200Response
import org.openapitools.client.model.CartCouponAdd
import org.openapitools.client.model.CartCouponAdd200Response
import org.openapitools.client.model.CartCouponCount200Response
import org.openapitools.client.model.CartCreate
import org.openapitools.client.model.CartDelete200Response
import org.openapitools.client.model.CartDisconnect200Response
import org.openapitools.client.model.CartGiftcardAdd200Response
import org.openapitools.client.model.CartGiftcardCount200Response
import org.openapitools.client.model.CartInfo200Response
import org.openapitools.client.model.CartList200Response
import org.openapitools.client.model.CartMethods200Response
import org.openapitools.client.model.CartPluginList200Response
import org.openapitools.client.model.CartScriptAdd200Response
import org.openapitools.client.model.CartValidate200Response
import org.openapitools.client.model.ModelResponseCartCatalogPriceRulesList
import org.openapitools.client.model.ModelResponseCartCouponList
import org.openapitools.client.model.ModelResponseCartGiftCardList
import org.openapitools.client.model.ModelResponseCartMetaDataList
import org.openapitools.client.model.ModelResponseCartScriptList
import org.openapitools.client.model.ModelResponseCartShippingZonesList
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object CartApi {

  def apply(baseUrl: String = "https://api.api2cart.com/v1.1") = new CartApi(baseUrl)
}

class CartApi(baseUrl: String) {

  /**
   * Get bridge key and store key
   * 
   * Expected answers:
   *   code 200 : CartBridge200Response (successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   */
  def cartBridge()(implicit apiKey: ApiKeyValue): ApiRequest[CartBridge200Response] =
    ApiRequest[CartBridge200Response](ApiMethods.GET, baseUrl, "/cart.bridge.json", "application/json")
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[CartBridge200Response](200)
      

  /**
   * Get count of cart catalog price rules discounts.
   * 
   * Expected answers:
   *   code 200 : CartCatalogPriceRulesCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def cartCatalogPriceRulesCount()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartCatalogPriceRulesCount200Response] =
    ApiRequest[CartCatalogPriceRulesCount200Response](ApiMethods.GET, baseUrl, "/cart.catalog_price_rules.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[CartCatalogPriceRulesCount200Response](200)
      

  /**
   * Get cart catalog price rules discounts.
   * 
   * Expected answers:
   *   code 200 : ModelResponseCartCatalogPriceRulesList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param ids Retrieves  catalog_price_rules by ids
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartCatalogPriceRulesList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, ids: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCartCatalogPriceRulesList] =
    ApiRequest[ModelResponseCartCatalogPriceRulesList](ApiMethods.GET, baseUrl, "/cart.catalog_price_rules.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("ids", ids)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCartCatalogPriceRulesList](200)
      

  /**
   * Clear cache on store.
   * 
   * Expected answers:
   *   code 200 : CartClearCache200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param cacheType Defines which cache should be cleared.
   */
  def cartClearCache(cacheType: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartClearCache200Response] =
    ApiRequest[CartClearCache200Response](ApiMethods.POST, baseUrl, "/cart.clear_cache.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("cache_type", cacheType)
      .withSuccessResponse[CartClearCache200Response](200)
      

  /**
   * Get list of cart configs
   * 
   * Expected answers:
   *   code 200 : CartConfig200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartConfig(params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartConfig200Response] =
    ApiRequest[CartConfig200Response](ApiMethods.GET, baseUrl, "/cart.config.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[CartConfig200Response](200)
      

  /**
   * Use this API method to update custom data in client database.
   * 
   * Expected answers:
   *   code 200 : CartConfigUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param cartConfigUpdate 
   */
  def cartConfigUpdate(cartConfigUpdate: CartConfigUpdate)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartConfigUpdate200Response] =
    ApiRequest[CartConfigUpdate200Response](ApiMethods.PUT, baseUrl, "/cart.config.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(cartConfigUpdate)
      .withSuccessResponse[CartConfigUpdate200Response](200)
      

  /**
   * Use this method to create a coupon with specified conditions.
   * 
   * Expected answers:
   *   code 200 : CartCouponAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param cartCouponAdd 
   */
  def cartCouponAdd(cartCouponAdd: CartCouponAdd)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartCouponAdd200Response] =
    ApiRequest[CartCouponAdd200Response](ApiMethods.POST, baseUrl, "/cart.coupon.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(cartCouponAdd)
      .withSuccessResponse[CartCouponAdd200Response](200)
      

  /**
   * Use this method to add additional conditions for coupon application.
   * 
   * Expected answers:
   *   code 200 : BasketLiveShippingServiceDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param couponId Coupon Id
   * @param entity Defines condition entity type
   * @param key Defines condition entity attribute key
   * @param operator Defines condition operator
   * @param value Defines condition value, can be comma separated according to the operator.
   * @param target Defines condition operator
   * @param includeTax Indicates whether to apply a discount for taxes.
   * @param includeShipping Indicates whether to apply a discount for shipping.
   * @param storeId Store Id
   */
  def cartCouponConditionAdd(couponId: String, entity: String, key: String, operator: String, value: String, target: Option[String] = None, includeTax: Option[Boolean] = None, includeShipping: Option[Boolean] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketLiveShippingServiceDelete200Response] =
    ApiRequest[BasketLiveShippingServiceDelete200Response](ApiMethods.POST, baseUrl, "/cart.coupon.condition.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("coupon_id", couponId)
      .withQueryParam("entity", entity)
      .withQueryParam("key", key)
      .withQueryParam("operator", operator)
      .withQueryParam("value", value)
      .withQueryParam("target", target)
      .withQueryParam("include_tax", includeTax)
      .withQueryParam("include_shipping", includeShipping)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[BasketLiveShippingServiceDelete200Response](200)
      

  /**
   * This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.
   * 
   * Expected answers:
   *   code 200 : CartCouponCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param storeId Store Id
   * @param avail Defines category's visibility status
   * @param dateStartFrom Filter entity by date_start (greater or equal)
   * @param dateStartTo Filter entity by date_start (less or equal)
   * @param dateEndFrom Filter entity by date_end (greater or equal)
   * @param dateEndTo Filter entity by date_end (less or equal)
   */
  def cartCouponCount(storeId: Option[String] = None, avail: Option[Boolean] = None, dateStartFrom: Option[String] = None, dateStartTo: Option[String] = None, dateEndFrom: Option[String] = None, dateEndTo: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartCouponCount200Response] =
    ApiRequest[CartCouponCount200Response](ApiMethods.GET, baseUrl, "/cart.coupon.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("store_id", storeId)
      .withQueryParam("avail", avail)
      .withQueryParam("date_start_from", dateStartFrom)
      .withQueryParam("date_start_to", dateStartTo)
      .withQueryParam("date_end_from", dateEndFrom)
      .withQueryParam("date_end_to", dateEndTo)
      .withSuccessResponse[CartCouponCount200Response](200)
      

  /**
   * Delete coupon
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param storeId Store Id
   */
  def cartCouponDelete(id: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/cart.coupon.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Get cart coupon discounts.
   * 
   * Expected answers:
   *   code 200 : ModelResponseCartCouponList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param couponsIds Filter coupons by ids
   * @param storeId Filter coupons by store id
   * @param langId Language id
   * @param avail Filter coupons by avail status
   * @param dateStartFrom Filter entity by date_start (greater or equal)
   * @param dateStartTo Filter entity by date_start (less or equal)
   * @param dateEndFrom Filter entity by date_end (greater or equal)
   * @param dateEndTo Filter entity by date_end (less or equal)
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartCouponList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, couponsIds: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, avail: Option[Boolean] = None, dateStartFrom: Option[String] = None, dateStartTo: Option[String] = None, dateEndFrom: Option[String] = None, dateEndTo: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCartCouponList] =
    ApiRequest[ModelResponseCartCouponList](ApiMethods.GET, baseUrl, "/cart.coupon.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("coupons_ids", couponsIds)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("avail", avail)
      .withQueryParam("date_start_from", dateStartFrom)
      .withQueryParam("date_start_to", dateStartTo)
      .withQueryParam("date_end_from", dateEndFrom)
      .withQueryParam("date_end_to", dateEndTo)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCartCouponList](200)
      

  /**
   * Add store to the account
   * 
   * Expected answers:
   *   code 200 : AccountCartAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   * 
   * @param cartCreate 
   */
  def cartCreate(cartCreate: CartCreate)(implicit apiKey: ApiKeyValue): ApiRequest[AccountCartAdd200Response] =
    ApiRequest[AccountCartAdd200Response](ApiMethods.POST, baseUrl, "/cart.create.json", "application/json")
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withBody(cartCreate)
      .withSuccessResponse[AccountCartAdd200Response](200)
      

  /**
   * Remove store from API2Cart
   * 
   * Expected answers:
   *   code 200 : CartDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param deleteBridge Identifies if there is a necessity to delete bridge
   */
  def cartDelete(deleteBridge: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartDelete200Response] =
    ApiRequest[CartDelete200Response](ApiMethods.DELETE, baseUrl, "/cart.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("delete_bridge", deleteBridge)
      .withSuccessResponse[CartDelete200Response](200)
      

  /**
   * Disconnect with the store and clear store session data.
   * 
   * Expected answers:
   *   code 200 : CartDisconnect200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param deleteBridge Identifies if there is a necessity to delete bridge
   */
  def cartDisconnect(deleteBridge: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartDisconnect200Response] =
    ApiRequest[CartDisconnect200Response](ApiMethods.GET, baseUrl, "/cart.disconnect.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("delete_bridge", deleteBridge)
      .withSuccessResponse[CartDisconnect200Response](200)
      

  /**
   * Use this method to create a gift card for a specified amount.
   * 
   * Expected answers:
   *   code 200 : CartGiftcardAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param amount Defines the gift card amount value.
   * @param code Gift card code
   * @param ownerEmail Gift card owner email
   * @param recipientEmail Gift card recipient email
   * @param recipientName Gift card recipient name
   * @param ownerName Gift card owner name
   */
  def cartGiftcardAdd(amount: BigDecimal, code: Option[String] = None, ownerEmail: Option[String] = None, recipientEmail: Option[String] = None, recipientName: Option[String] = None, ownerName: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartGiftcardAdd200Response] =
    ApiRequest[CartGiftcardAdd200Response](ApiMethods.POST, baseUrl, "/cart.giftcard.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("amount", amount)
      .withQueryParam("code", code)
      .withQueryParam("owner_email", ownerEmail)
      .withQueryParam("recipient_email", recipientEmail)
      .withQueryParam("recipient_name", recipientName)
      .withQueryParam("owner_name", ownerName)
      .withSuccessResponse[CartGiftcardAdd200Response](200)
      

  /**
   * Get gift cards count.
   * 
   * Expected answers:
   *   code 200 : CartGiftcardCount200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param storeId Store Id
   */
  def cartGiftcardCount(storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartGiftcardCount200Response] =
    ApiRequest[CartGiftcardCount200Response](ApiMethods.GET, baseUrl, "/cart.giftcard.count.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[CartGiftcardCount200Response](200)
      

  /**
   * Delete giftcard
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   */
  def cartGiftcardDelete(id: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/cart.giftcard.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Get gift cards list.
   * 
   * Expected answers:
   *   code 200 : ModelResponseCartGiftCardList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartGiftcardList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCartGiftCardList] =
    ApiRequest[ModelResponseCartGiftCardList](ApiMethods.GET, baseUrl, "/cart.giftcard.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCartGiftCardList](200)
      

  /**
   * This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.
   * 
   * Expected answers:
   *   code 200 : CartInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartInfo(storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartInfo200Response] =
    ApiRequest[CartInfo200Response](ApiMethods.GET, baseUrl, "/cart.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[CartInfo200Response](200)
      

  /**
   * Get list of supported carts
   * 
   * Expected answers:
   *   code 200 : CartList200Response (successful operation)
   * 
   * Available security schemes:
   *   ApiKeyAuth (apiKey)
   */
  def cartList()(implicit apiKey: ApiKeyValue): ApiRequest[CartList200Response] =
    ApiRequest[CartList200Response](ApiMethods.GET, baseUrl, "/cart.list.json", "application/json")
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[CartList200Response](200)
      

  /**
   * Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.
   * 
   * Expected answers:
   *   code 200 : ModelResponseCartMetaDataList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param entityId Entity Id
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param entity Entity
   * @param storeId Store Id
   * @param langId Language id
   * @param key Key
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartMetaDataList(entityId: String, count: Option[Int] = None, pageCursor: Option[String] = None, entity: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None, key: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCartMetaDataList] =
    ApiRequest[ModelResponseCartMetaDataList](ApiMethods.GET, baseUrl, "/cart.meta_data.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("entity_id", entityId)
      .withQueryParam("entity", entity)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withQueryParam("key", key)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCartMetaDataList](200)
      

  /**
   * Set meta data for a specific entity
   * 
   * Expected answers:
   *   code 200 : AttributeAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param entityId Entity Id
   * @param key Key
   * @param value Value
   * @param namespace Metafield namespace
   * @param entity Entity
   * @param storeId Store Id
   * @param langId Language id
   */
  def cartMetaDataSet(entityId: String, key: String, value: String, namespace: String, entity: Option[String] = None, storeId: Option[String] = None, langId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeAdd200Response] =
    ApiRequest[AttributeAdd200Response](ApiMethods.POST, baseUrl, "/cart.meta_data.set.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("entity_id", entityId)
      .withQueryParam("key", key)
      .withQueryParam("value", value)
      .withQueryParam("namespace", namespace)
      .withQueryParam("entity", entity)
      .withQueryParam("store_id", storeId)
      .withQueryParam("lang_id", langId)
      .withSuccessResponse[AttributeAdd200Response](200)
      

  /**
   * Unset meta data for a specific entity
   * 
   * Expected answers:
   *   code 200 : BasketLiveShippingServiceDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param entityId Entity Id
   * @param key Key
   * @param id Entity id
   * @param entity Entity
   * @param storeId Store Id
   */
  def cartMetaDataUnset(entityId: String, key: String, id: String, entity: Option[String] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketLiveShippingServiceDelete200Response] =
    ApiRequest[BasketLiveShippingServiceDelete200Response](ApiMethods.DELETE, baseUrl, "/cart.meta_data.unset.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("entity_id", entityId)
      .withQueryParam("key", key)
      .withQueryParam("id", id)
      .withQueryParam("entity", entity)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[BasketLiveShippingServiceDelete200Response](200)
      

  /**
   * Returns a list of supported API methods.
   * 
   * Expected answers:
   *   code 200 : CartMethods200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def cartMethods()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartMethods200Response] =
    ApiRequest[CartMethods200Response](ApiMethods.GET, baseUrl, "/cart.methods.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[CartMethods200Response](200)
      

  /**
   * Get a list of third-party plugins installed on the store.
   * 
   * Expected answers:
   *   code 200 : CartPluginList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param storeId Store Id
   */
  def cartPluginList(start: Option[Int] = None, count: Option[Int] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartPluginList200Response] =
    ApiRequest[CartPluginList200Response](ApiMethods.GET, baseUrl, "/cart.plugin.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[CartPluginList200Response](200)
      

  /**
   * Add new script to the storefront
   * 
   * Expected answers:
   *   code 200 : CartScriptAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param name The user-friendly script name
   * @param description The user-friendly description
   * @param html An html string containing exactly one `script` tag.
   * @param src The URL of the remote script
   * @param loadMethod The load method to use for the script
   * @param scope The page or pages on the online store where the script should be included
   * @param events Event for run scripts
   * @param storeId Store Id
   */
  def cartScriptAdd(name: Option[String] = None, description: Option[String] = None, html: Option[String] = None, src: Option[String] = None, loadMethod: Option[String] = None, scope: Option[String] = None, events: Option[String] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartScriptAdd200Response] =
    ApiRequest[CartScriptAdd200Response](ApiMethods.POST, baseUrl, "/cart.script.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("name", name)
      .withQueryParam("description", description)
      .withQueryParam("html", html)
      .withQueryParam("src", src)
      .withQueryParam("load_method", loadMethod)
      .withQueryParam("scope", scope)
      .withQueryParam("events", events)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[CartScriptAdd200Response](200)
      

  /**
   * Remove script from the storefront
   * 
   * Expected answers:
   *   code 200 : AttributeDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param storeId Store Id
   */
  def cartScriptDelete(id: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeDelete200Response] =
    ApiRequest[AttributeDelete200Response](ApiMethods.DELETE, baseUrl, "/cart.script.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[AttributeDelete200Response](200)
      

  /**
   * Get scripts installed to the storefront
   * 
   * Expected answers:
   *   code 200 : ModelResponseCartScriptList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
   * @param scriptIds Retrieves only scripts with specific ids
   * @param storeId Store Id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartScriptList(start: Option[Int] = None, count: Option[Int] = None, pageCursor: Option[String] = None, scriptIds: Option[String] = None, storeId: Option[String] = None, createdFrom: Option[String] = None, createdTo: Option[String] = None, modifiedFrom: Option[String] = None, modifiedTo: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCartScriptList] =
    ApiRequest[ModelResponseCartScriptList](ApiMethods.GET, baseUrl, "/cart.script.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("page_cursor", pageCursor)
      .withQueryParam("script_ids", scriptIds)
      .withQueryParam("store_id", storeId)
      .withQueryParam("created_from", createdFrom)
      .withQueryParam("created_to", createdTo)
      .withQueryParam("modified_from", modifiedFrom)
      .withQueryParam("modified_to", modifiedTo)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCartScriptList](200)
      

  /**
   * Get list of shipping zones
   * 
   * Expected answers:
   *   code 200 : ModelResponseCartShippingZonesList (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def cartShippingZonesList(start: Option[Int] = None, count: Option[Int] = None, storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[ModelResponseCartShippingZonesList] =
    ApiRequest[ModelResponseCartShippingZonesList](ApiMethods.GET, baseUrl, "/cart.shipping_zones.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[ModelResponseCartShippingZonesList](200)
      

  /**
   * This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.
   * 
   * Expected answers:
   *   code 200 : CartValidate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param validateVersion Specify if api2cart should validate cart version
   */
  def cartValidate(validateVersion: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[CartValidate200Response] =
    ApiRequest[CartValidate200Response](ApiMethods.GET, baseUrl, "/cart.validate.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("validate_version", validateVersion)
      .withSuccessResponse[CartValidate200Response](200)
      



}

