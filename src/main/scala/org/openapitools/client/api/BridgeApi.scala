/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AttributeUpdate200Response
import org.openapitools.client.model.AttributeValueDelete200Response
import java.io.File
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object BridgeApi {

  def apply(baseUrl: String = "https://api.api2cart.com/v1.1") = new BridgeApi(baseUrl)
}

class BridgeApi(baseUrl: String) {

  /**
   * Delete bridge from the store.
   * 
   * Expected answers:
   *   code 200 : AttributeValueDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def bridgeDelete()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeValueDelete200Response] =
    ApiRequest[AttributeValueDelete200Response](ApiMethods.POST, baseUrl, "/bridge.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[AttributeValueDelete200Response](200)
      

  /**
   * Download bridge for store.</br>Please note that the method would not work if you call it from Swagger UI.
   * 
   * Expected answers:
   *   code 200 : File (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param whitelabel Identifies if there is a necessity to download whitelabel bridge.
   */
  def bridgeDownload(whitelabel: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, baseUrl, "/bridge.download.file", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("whitelabel", whitelabel)
      .withSuccessResponse[File](200)
      

  /**
   * Update bridge in the store.
   * 
   * Expected answers:
   *   code 200 : AttributeUpdate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   */
  def bridgeUpdate()(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[AttributeUpdate200Response] =
    ApiRequest[AttributeUpdate200Response](ApiMethods.POST, baseUrl, "/bridge.update.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withSuccessResponse[AttributeUpdate200Response](200)
      



}

