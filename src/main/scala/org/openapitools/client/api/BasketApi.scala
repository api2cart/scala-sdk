/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BasketInfo200Response
import org.openapitools.client.model.BasketItemAdd200Response
import org.openapitools.client.model.BasketLiveShippingServiceCreate200Response
import org.openapitools.client.model.BasketLiveShippingServiceDelete200Response
import org.openapitools.client.model.BasketLiveShippingServiceList200Response
import java.math.BigDecimal
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object BasketApi {

  def apply(baseUrl: String = "https://api.api2cart.com/v1.1") = new BasketApi(baseUrl)
}

class BasketApi(baseUrl: String) {

  /**
   * Retrieve basket information.
   * 
   * Expected answers:
   *   code 200 : BasketInfo200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   * @param storeId Store Id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
   */
  def basketInfo(id: String, storeId: Option[String] = None, responseFields: Option[String] = None, params: Option[String] = None, exclude: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketInfo200Response] =
    ApiRequest[BasketInfo200Response](ApiMethods.GET, baseUrl, "/basket.info.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("store_id", storeId)
      .withQueryParam("response_fields", responseFields)
      .withQueryParam("params", params)
      .withQueryParam("exclude", exclude)
      .withSuccessResponse[BasketInfo200Response](200)
      

  /**
   * Add item to basket
   * 
   * Expected answers:
   *   code 200 : BasketItemAdd200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param customerId Retrieves orders specified by customer id
   * @param productId Defines id of the product which should be added to the basket
   * @param variantId Defines product's variants specified by variant id
   * @param quantity Defines new items quantity
   * @param storeId Store Id
   */
  def basketItemAdd(customerId: String, productId: String, variantId: Option[String] = None, quantity: Option[BigDecimal] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketItemAdd200Response] =
    ApiRequest[BasketItemAdd200Response](ApiMethods.POST, baseUrl, "/basket.item.add.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("customer_id", customerId)
      .withQueryParam("product_id", productId)
      .withQueryParam("variant_id", variantId)
      .withQueryParam("quantity", quantity)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[BasketItemAdd200Response](200)
      

  /**
   * Create live shipping rate service.
   * 
   * Expected answers:
   *   code 200 : BasketLiveShippingServiceCreate200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param name Shipping Service Name
   * @param callback Callback url that returns shipping rates. It should be able to accept POST requests with json data.
   * @param storeId Store Id
   */
  def basketLiveShippingServiceCreate(name: String, callback: String, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketLiveShippingServiceCreate200Response] =
    ApiRequest[BasketLiveShippingServiceCreate200Response](ApiMethods.POST, baseUrl, "/basket.live_shipping_service.create.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("name", name)
      .withQueryParam("callback", callback)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[BasketLiveShippingServiceCreate200Response](200)
      

  /**
   * Delete live shipping rate service.
   * 
   * Expected answers:
   *   code 200 : BasketLiveShippingServiceDelete200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param id Entity id
   */
  def basketLiveShippingServiceDelete(id: Int)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketLiveShippingServiceDelete200Response] =
    ApiRequest[BasketLiveShippingServiceDelete200Response](ApiMethods.DELETE, baseUrl, "/basket.live_shipping_service.delete.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("id", id)
      .withSuccessResponse[BasketLiveShippingServiceDelete200Response](200)
      

  /**
   * Retrieve a list of live shipping rate services.
   * 
   * Expected answers:
   *   code 200 : BasketLiveShippingServiceList200Response (successful operation)
   * 
   * Available security schemes:
   *   StoreKeyAuth (apiKey)
   *   ApiKeyAuth (apiKey)
   * 
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count=250
   * @param storeId Store Id
   */
  def basketLiveShippingServiceList(start: Option[Int] = None, count: Option[Int] = None, storeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[BasketLiveShippingServiceList200Response] =
    ApiRequest[BasketLiveShippingServiceList200Response](ApiMethods.GET, baseUrl, "/basket.live_shipping_service.list.json", "application/json")
      .withApiKey(apiKey, "x-store-key", HEADER)
      .withApiKey(apiKey, "x-api-key", HEADER)
      .withQueryParam("start", start)
      .withQueryParam("count", count)
      .withQueryParam("store_id", storeId)
      .withSuccessResponse[BasketLiveShippingServiceList200Response](200)
      



}

